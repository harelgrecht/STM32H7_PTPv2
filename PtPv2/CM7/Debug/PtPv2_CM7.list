
PtPv2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004114  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080043ac  080043ac  000053ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004574  08004574  0000612c  2**0
                  CONTENTS
  4 .ARM          00000000  08004574  08004574  0000612c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004574  08004574  0000612c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004574  08004574  00005574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004578  08004578  00005578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  24000000  0800457c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDescripSection 00000060  2400006c  080045e8  0000606c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDescripSection 00000060  240000cc  08004648  000060cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000002b4  2400012c  080046a8  0000612c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240003e0  080046a8  000063e0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000612c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013c32  00000000  00000000  0000615a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002395  00000000  00000000  00019d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010e0  00000000  00000000  0001c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cff  00000000  00000000  0001d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c369  00000000  00000000  0001df07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000137f0  00000000  00000000  0005a270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018f3ec  00000000  00000000  0006da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001fce4c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004dc8  00000000  00000000  001fce90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  00201c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400012c 	.word	0x2400012c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004394 	.word	0x08004394

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000130 	.word	0x24000130
 80002d4:	08004394 	.word	0x08004394

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b49      	ldr	r3, [pc, #292]	@ (8000404 <SystemInit+0x12c>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a48      	ldr	r2, [pc, #288]	@ (8000404 <SystemInit+0x12c>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <SystemInit+0x12c>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a44      	ldr	r2, [pc, #272]	@ (8000404 <SystemInit+0x12c>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b43      	ldr	r3, [pc, #268]	@ (8000408 <SystemInit+0x130>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b40      	ldr	r3, [pc, #256]	@ (8000408 <SystemInit+0x130>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a3e      	ldr	r2, [pc, #248]	@ (8000408 <SystemInit+0x130>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b3d      	ldr	r3, [pc, #244]	@ (800040c <SystemInit+0x134>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	@ (800040c <SystemInit+0x134>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b3a      	ldr	r3, [pc, #232]	@ (800040c <SystemInit+0x134>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b39      	ldr	r3, [pc, #228]	@ (800040c <SystemInit+0x134>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4938      	ldr	r1, [pc, #224]	@ (800040c <SystemInit+0x134>)
 800032c:	4b38      	ldr	r3, [pc, #224]	@ (8000410 <SystemInit+0x138>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <SystemInit+0x130>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <SystemInit+0x130>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a30      	ldr	r2, [pc, #192]	@ (8000408 <SystemInit+0x130>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b2f      	ldr	r3, [pc, #188]	@ (800040c <SystemInit+0x134>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <SystemInit+0x134>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b2c      	ldr	r3, [pc, #176]	@ (800040c <SystemInit+0x134>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SystemInit+0x134>)
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <SystemInit+0x13c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <SystemInit+0x134>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <SystemInit+0x140>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <SystemInit+0x134>)
 800036e:	4a2b      	ldr	r2, [pc, #172]	@ (800041c <SystemInit+0x144>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <SystemInit+0x134>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b24      	ldr	r3, [pc, #144]	@ (800040c <SystemInit+0x134>)
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <SystemInit+0x144>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b23      	ldr	r3, [pc, #140]	@ (800040c <SystemInit+0x134>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b21      	ldr	r3, [pc, #132]	@ (800040c <SystemInit+0x134>)
 8000386:	4a25      	ldr	r2, [pc, #148]	@ (800041c <SystemInit+0x144>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b20      	ldr	r3, [pc, #128]	@ (800040c <SystemInit+0x134>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <SystemInit+0x134>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a1d      	ldr	r2, [pc, #116]	@ (800040c <SystemInit+0x134>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <SystemInit+0x134>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <SystemInit+0x148>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <SystemInit+0x148>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000424 <SystemInit+0x14c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <SystemInit+0x150>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SystemInit+0x154>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <SystemInit+0x134>)
 80003c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d113      	bne.n	80003f8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <SystemInit+0x134>)
 80003d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d6:	4a0d      	ldr	r2, [pc, #52]	@ (800040c <SystemInit+0x134>)
 80003d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <SystemInit+0x158>)
 80003e2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003e6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <SystemInit+0x134>)
 80003ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <SystemInit+0x134>)
 80003f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	52002000 	.word	0x52002000
 800040c:	58024400 	.word	0x58024400
 8000410:	eaf6ed7f 	.word	0xeaf6ed7f
 8000414:	02020200 	.word	0x02020200
 8000418:	01ff0000 	.word	0x01ff0000
 800041c:	01010280 	.word	0x01010280
 8000420:	580000c0 	.word	0x580000c0
 8000424:	5c001000 	.word	0x5c001000
 8000428:	ffff0000 	.word	0xffff0000
 800042c:	51008108 	.word	0x51008108
 8000430:	52004000 	.word	0x52004000

08000434 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_EXTERNAL_SOURCE_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode */
    PWR->CR3 = (PWR->CR3 & ~(PWR_CR3_SMPSEN | PWR_CR3_LDOEN)) | PWR_CR3_BYPASS;
 8000438:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <ExitRun0Mode+0x30>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	f023 0307 	bic.w	r3, r3, #7
 8000440:	4a08      	ldr	r2, [pc, #32]	@ (8000464 <ExitRun0Mode+0x30>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	60d3      	str	r3, [r2, #12]
  #else
    PWR->CR3 = (PWR->CR3 & ~(PWR_CR3_LDOEN)) | PWR_CR3_BYPASS;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000448:	bf00      	nop
 800044a:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <ExitRun0Mode+0x30>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	58024800 	.word	0x58024800

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000472:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b25      	ldr	r3, [pc, #148]	@ (800050c <main+0xa4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d004      	beq.n	800048c <main+0x24>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0xe>
  if ( timeout < 0 )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x2e>
  {
  Error_Handler();
 8000492:	f000 fa47 	bl	8000924 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000496:	f000 fc51 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049a:	f000 f83b 	bl	8000514 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800049e:	4b1b      	ldr	r3, [pc, #108]	@ (800050c <main+0xa4>)
 80004a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004a4:	4a19      	ldr	r2, [pc, #100]	@ (800050c <main+0xa4>)
 80004a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004ae:	4b17      	ldr	r3, [pc, #92]	@ (800050c <main+0xa4>)
 80004b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004bc:	2000      	movs	r0, #0
 80004be:	f001 fddd 	bl	800207c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004c2:	2100      	movs	r1, #0
 80004c4:	2000      	movs	r0, #0
 80004c6:	f001 fdf3 	bl	80020b0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004ce:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004d0:	bf00      	nop
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <main+0xa4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d104      	bne.n	80004e8 <main+0x80>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	1e5a      	subs	r2, r3, #1
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	dcf4      	bgt.n	80004d2 <main+0x6a>
if ( timeout < 0 )
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	da01      	bge.n	80004f2 <main+0x8a>
{
Error_Handler();
 80004ee:	f000 fa19 	bl	8000924 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f975 	bl	80007e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004f6:	f000 f90d 	bl	8000714 <MX_TIM2_Init>
  MX_ETH_Init();
 80004fa:	f000 f8bb 	bl	8000674 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  InitETH_PTP();
 80004fe:	f000 f9b7 	bl	8000870 <InitETH_PTP>

  HAL_ETH_Start_IT(&heth);
 8000502:	4803      	ldr	r0, [pc, #12]	@ (8000510 <main+0xa8>)
 8000504:	f000 feae 	bl	8001264 <HAL_ETH_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <main+0xa0>
 800050c:	58024400 	.word	0x58024400
 8000510:	24000180 	.word	0x24000180

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b0a4      	sub	sp, #144	@ 0x90
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800051e:	224c      	movs	r2, #76	@ 0x4c
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fc82 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800052c:	2220      	movs	r2, #32
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f003 fc7b 	bl	8003e2c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
 8000546:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY);
 8000548:	2001      	movs	r0, #1
 800054a:	f001 fdc5 	bl	80020d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b44      	ldr	r3, [pc, #272]	@ (8000664 <SystemClock_Config+0x150>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a43      	ldr	r2, [pc, #268]	@ (8000664 <SystemClock_Config+0x150>)
 8000558:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800055c:	6193      	str	r3, [r2, #24]
 800055e:	4b41      	ldr	r3, [pc, #260]	@ (8000664 <SystemClock_Config+0x150>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <SystemClock_Config+0x154>)
 800056a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800056c:	4a3e      	ldr	r2, [pc, #248]	@ (8000668 <SystemClock_Config+0x154>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000574:	4b3c      	ldr	r3, [pc, #240]	@ (8000668 <SystemClock_Config+0x154>)
 8000576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000580:	bf00      	nop
 8000582:	4b38      	ldr	r3, [pc, #224]	@ (8000664 <SystemClock_Config+0x150>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800058a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800058e:	d1f8      	bne.n	8000582 <SystemClock_Config+0x6e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000590:	2322      	movs	r3, #34	@ 0x22
 8000592:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000594:	2301      	movs	r3, #1
 8000596:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2340      	movs	r3, #64	@ 0x40
 800059a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005ac:	233c      	movs	r3, #60	@ 0x3c
 80005ae:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005b4:	2305      	movs	r3, #5
 80005b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005be:	230c      	movs	r3, #12
 80005c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fdd9 	bl	800218c <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005e0:	f000 f9a0 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	233f      	movs	r3, #63	@ 0x3f
 80005e6:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2303      	movs	r3, #3
 80005ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005f0:	2308      	movs	r3, #8
 80005f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005f4:	2340      	movs	r3, #64	@ 0x40
 80005f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005f8:	2340      	movs	r3, #64	@ 0x40
 80005fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000600:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000602:	2340      	movs	r3, #64	@ 0x40
 8000604:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800060a:	2104      	movs	r1, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fa17 	bl	8002a40 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000618:	f000 f984 	bl	8000924 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800061c:	4b13      	ldr	r3, [pc, #76]	@ (800066c <SystemClock_Config+0x158>)
 800061e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000622:	4a12      	ldr	r2, [pc, #72]	@ (800066c <SystemClock_Config+0x158>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <SystemClock_Config+0x158>)
 800062e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_PIN;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1);
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <SystemClock_Config+0x15c>)
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800064a:	2322      	movs	r3, #34	@ 0x22
 800064c:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 800064e:	2320      	movs	r3, #32
 8000650:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fd52 	bl	8003100 <HAL_RCCEx_CRSConfig>
}
 800065c:	bf00      	nop
 800065e:	3790      	adds	r7, #144	@ 0x90
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	58024800 	.word	0x58024800
 8000668:	58000400 	.word	0x58000400
 800066c:	58024400 	.word	0x58024400
 8000670:	02dc6bff 	.word	0x02dc6bff

08000674 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_ETH_Init+0x88>)
 800067a:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <MX_ETH_Init+0x8c>)
 800067c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800067e:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <MX_ETH_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_ETH_Init+0x90>)
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800068a:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <MX_ETH_Init+0x90>)
 800068c:	22e1      	movs	r2, #225	@ 0xe1
 800068e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000690:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <MX_ETH_Init+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000696:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <MX_ETH_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800069c:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_ETH_Init+0x90>)
 800069e:	2200      	movs	r2, #0
 80006a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_ETH_Init+0x88>)
 80006a4:	4a17      	ldr	r2, [pc, #92]	@ (8000704 <MX_ETH_Init+0x90>)
 80006a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_ETH_Init+0x88>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006ae:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_ETH_Init+0x88>)
 80006b0:	4a15      	ldr	r2, [pc, #84]	@ (8000708 <MX_ETH_Init+0x94>)
 80006b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_ETH_Init+0x88>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	@ (800070c <MX_ETH_Init+0x98>)
 80006b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006ba:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <MX_ETH_Init+0x88>)
 80006bc:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
  ConfigurePTPMACFilter(&heth);
 80006c2:	480e      	ldr	r0, [pc, #56]	@ (80006fc <MX_ETH_Init+0x88>)
 80006c4:	f000 f906 	bl	80008d4 <ConfigurePTPMACFilter>

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006c8:	480c      	ldr	r0, [pc, #48]	@ (80006fc <MX_ETH_Init+0x88>)
 80006ca:	f000 fccd 	bl	8001068 <HAL_ETH_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ETH_Init+0x64>
  {
    Error_Handler();
 80006d4:	f000 f926 	bl	8000924 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006d8:	2238      	movs	r2, #56	@ 0x38
 80006da:	2100      	movs	r1, #0
 80006dc:	480c      	ldr	r0, [pc, #48]	@ (8000710 <MX_ETH_Init+0x9c>)
 80006de:	f003 fba5 	bl	8003e2c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_ETH_Init+0x9c>)
 80006e4:	2221      	movs	r2, #33	@ 0x21
 80006e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_ETH_Init+0x9c>)
 80006ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <MX_ETH_Init+0x9c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */
  /* USER CODE END ETH_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	24000180 	.word	0x24000180
 8000700:	40028000 	.word	0x40028000
 8000704:	24000284 	.word	0x24000284
 8000708:	240000cc 	.word	0x240000cc
 800070c:	2400006c 	.word	0x2400006c
 8000710:	24000148 	.word	0x24000148

08000714 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	@ 0x30
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000742:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <MX_TIM2_Init+0xc8>)
 8000744:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000748:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800074a:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <MX_TIM2_Init+0xc8>)
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <MX_TIM2_Init+0xc8>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000756:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_TIM2_Init+0xc8>)
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075e:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_TIM2_Init+0xc8>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000764:	4b1d      	ldr	r3, [pc, #116]	@ (80007dc <MX_TIM2_Init+0xc8>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800076a:	481c      	ldr	r0, [pc, #112]	@ (80007dc <MX_TIM2_Init+0xc8>)
 800076c:	f002 fd1e 	bl	80031ac <HAL_TIM_Base_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000776:	f000 f8d5 	bl	8000924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4619      	mov	r1, r3
 8000786:	4815      	ldr	r0, [pc, #84]	@ (80007dc <MX_TIM2_Init+0xc8>)
 8000788:	f002 fd68 	bl	800325c <HAL_TIM_ConfigClockSource>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000792:	f000 f8c7 	bl	8000924 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000796:	2306      	movs	r3, #6
 8000798:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR4;
 800079a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800079e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_TIM2_Init+0xc8>)
 80007a8:	f002 fe50 	bl	800344c <HAL_TIM_SlaveConfigSynchro>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80007b2:	f000 f8b7 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_TIM2_Init+0xc8>)
 80007c4:	f003 f8ac 	bl	8003920 <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80007ce:	f000 f8a9 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	@ 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	24000238 	.word	0x24000238

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b21      	ldr	r3, [pc, #132]	@ (800086c <MX_GPIO_Init+0x8c>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ec:	4a1f      	ldr	r2, [pc, #124]	@ (800086c <MX_GPIO_Init+0x8c>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_GPIO_Init+0x8c>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b19      	ldr	r3, [pc, #100]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_GPIO_Init+0x8c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000828:	4a10      	ldr	r2, [pc, #64]	@ (800086c <MX_GPIO_Init+0x8c>)
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000838:	f003 0302 	and.w	r3, r3, #2
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000840:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000846:	4a09      	ldr	r2, [pc, #36]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800084c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_GPIO_Init+0x8c>)
 8000852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	58024400 	.word	0x58024400

08000870 <InitETH_PTP>:

/* USER CODE BEGIN 4 */

static void InitETH_PTP(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	@ 0x50
 8000874:	af00      	add	r7, sp, #0
	ETH_PTP_ConfigTypeDef ptpConfig;

	ptpConfig.Timestamp = ENABLE;
 8000876:	2301      	movs	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
	ptpConfig.TimestampUpdate = ENABLE;
 800087a:	2301      	movs	r3, #1
 800087c:	613b      	str	r3, [r7, #16]
	ptpConfig.TimestampAddendUpdate = ENABLE;
 800087e:	2301      	movs	r3, #1
 8000880:	617b      	str	r3, [r7, #20]
	ptpConfig.TimestampAll = ENABLE;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
	ptpConfig.TimestampEthernet = ENABLE;
 8000886:	2301      	movs	r3, #1
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
	ptpConfig.TimestampSnapshots = ENABLE;
 800088a:	2301      	movs	r3, #1
 800088c:	63bb      	str	r3, [r7, #56]	@ 0x38
	ptpConfig.TimestampFilter = 0x00000300; // Timestamp all PTP packets
 800088e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000892:	63fb      	str	r3, [r7, #60]	@ 0x3c
	ptpConfig.TimestampSubsecondInc = (uint32_t)(1e9 / PTP_CLOCK_FREQ); // Adjust for your clock
 8000894:	2314      	movs	r3, #20
 8000896:	64fb      	str	r3, [r7, #76]	@ 0x4c
	ptpConfig.TimestampAddend = 0x80000000; // Default addend
 8000898:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800089c:	64bb      	str	r3, [r7, #72]	@ 0x48

	if (HAL_ETH_PTP_SetConfig(&heth, &ptpConfig) != HAL_OK) {
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <InitETH_PTP+0x58>)
 80008a4:	f000 fdd6 	bl	8001454 <HAL_ETH_PTP_SetConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d005      	beq.n	80008ba <InitETH_PTP+0x4a>
		printf("PTP Configuration failed\n");
 80008ae:	4807      	ldr	r0, [pc, #28]	@ (80008cc <InitETH_PTP+0x5c>)
 80008b0:	f003 f9dc 	bl	8003c6c <puts>
		Error_Handler();
 80008b4:	f000 f836 	bl	8000924 <Error_Handler>
	} else {
		printf("PTP Configuration succeeded\n");
	}
}
 80008b8:	e002      	b.n	80008c0 <InitETH_PTP+0x50>
		printf("PTP Configuration succeeded\n");
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <InitETH_PTP+0x60>)
 80008bc:	f003 f9d6 	bl	8003c6c <puts>
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	@ 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	24000180 	.word	0x24000180
 80008cc:	080043ac 	.word	0x080043ac
 80008d0:	080043c8 	.word	0x080043c8

080008d4 <ConfigurePTPMACFilter>:
    __HAL_TIM_SET_COUNTER(&htim2, seconds * 1000000000 + nanoseconds);
    printf("Local clock synchronized: %lu seconds, %lu nanoseconds\n", seconds, nanoseconds);
}


void ConfigurePTPMACFilter(ETH_HandleTypeDef *heth) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	ETH_MACFilterConfigTypeDef macFilterConfig;
	memset(&macFilterConfig, 0, sizeof(macFilterConfig));
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	2210      	movs	r2, #16
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 faa1 	bl	8003e2c <memset>
	macFilterConfig.PassAllMulticast = ENABLE;
 80008ea:	2301      	movs	r3, #1
 80008ec:	737b      	strb	r3, [r7, #13]
	if (HAL_ETH_SetMACFilterConfig(heth, &macFilterConfig) != HAL_OK) {
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	4619      	mov	r1, r3
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 fedf 	bl	80016b8 <HAL_ETH_SetMACFilterConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d005      	beq.n	800090c <ConfigurePTPMACFilter+0x38>
        printf("Failed to configure MAC filters.\n");
 8000900:	4806      	ldr	r0, [pc, #24]	@ (800091c <ConfigurePTPMACFilter+0x48>)
 8000902:	f003 f9b3 	bl	8003c6c <puts>
        Error_Handler();
 8000906:	f000 f80d 	bl	8000924 <Error_Handler>
    } else {
        printf("MAC filters configured for PTP.\n");
	}
}
 800090a:	e002      	b.n	8000912 <ConfigurePTPMACFilter+0x3e>
        printf("MAC filters configured for PTP.\n");
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <ConfigurePTPMACFilter+0x4c>)
 800090e:	f003 f9ad 	bl	8003c6c <puts>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	08004520 	.word	0x08004520
 8000920:	08004544 	.word	0x08004544

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_MspInit+0x30>)
 8000938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800093c:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <HAL_MspInit+0x30>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_MspInit+0x30>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	58024400 	.word	0x58024400

08000964 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	@ 0x38
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a59      	ldr	r2, [pc, #356]	@ (8000ae8 <HAL_ETH_MspInit+0x184>)
 8000982:	4293      	cmp	r3, r2
 8000984:	f040 80ab 	bne.w	8000ade <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000988:	4b58      	ldr	r3, [pc, #352]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 800098a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800098e:	4a57      	ldr	r2, [pc, #348]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 8000990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000994:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000998:	4b54      	ldr	r3, [pc, #336]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 800099a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800099e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009a2:	623b      	str	r3, [r7, #32]
 80009a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80009a6:	4b51      	ldr	r3, [pc, #324]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 80009a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ac:	4a4f      	ldr	r2, [pc, #316]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 80009ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009b6:	4b4d      	ldr	r3, [pc, #308]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 80009b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009c0:	61fb      	str	r3, [r7, #28]
 80009c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80009c4:	4b49      	ldr	r3, [pc, #292]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 80009c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ca:	4a48      	ldr	r2, [pc, #288]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009d4:	4b45      	ldr	r3, [pc, #276]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 80009d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4b42      	ldr	r3, [pc, #264]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e8:	4a40      	ldr	r2, [pc, #256]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f2:	4b3e      	ldr	r3, [pc, #248]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b3a      	ldr	r3, [pc, #232]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	4a39      	ldr	r2, [pc, #228]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a10:	4b36      	ldr	r3, [pc, #216]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b33      	ldr	r3, [pc, #204]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a24:	4a31      	ldr	r2, [pc, #196]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a42:	4a2a      	ldr	r2, [pc, #168]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 8000a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4c:	4b27      	ldr	r3, [pc, #156]	@ (8000aec <HAL_ETH_MspInit+0x188>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> ETH_TXD1
    PG8     ------> ETH_PPS_OUT
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a5a:	2332      	movs	r3, #50	@ 0x32
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a6a:	230b      	movs	r3, #11
 8000a6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	481e      	ldr	r0, [pc, #120]	@ (8000af0 <HAL_ETH_MspInit+0x18c>)
 8000a76:	f001 f951 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a7a:	2386      	movs	r3, #134	@ 0x86
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4817      	ldr	r0, [pc, #92]	@ (8000af4 <HAL_ETH_MspInit+0x190>)
 8000a96:	f001 f941 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aac:	230b      	movs	r3, #11
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4810      	ldr	r0, [pc, #64]	@ (8000af8 <HAL_ETH_MspInit+0x194>)
 8000ab8:	f001 f930 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_13;
 8000abc:	f44f 5324 	mov.w	r3, #10496	@ 0x2900
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ace:	230b      	movs	r3, #11
 8000ad0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4808      	ldr	r0, [pc, #32]	@ (8000afc <HAL_ETH_MspInit+0x198>)
 8000ada:	f001 f91f 	bl	8001d1c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ade:	bf00      	nop
 8000ae0:	3738      	adds	r7, #56	@ 0x38
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40028000 	.word	0x40028000
 8000aec:	58024400 	.word	0x58024400
 8000af0:	58020800 	.word	0x58020800
 8000af4:	58020000 	.word	0x58020000
 8000af8:	58020400 	.word	0x58020400
 8000afc:	58021800 	.word	0x58021800

08000b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b10:	d10e      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <HAL_TIM_Base_MspInit+0x3c>)
 8000b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b18:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_TIM_Base_MspInit+0x3c>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_TIM_Base_MspInit+0x3c>)
 8000b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	58024400 	.word	0x58024400

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <MemManage_Handler+0x4>

08000b58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f000 f943 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e00a      	b.n	8000bc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bb0:	f3af 8000 	nop.w
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	60ba      	str	r2, [r7, #8]
 8000bbc:	b2ca      	uxtb	r2, r1
 8000bbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	dbf0      	blt.n	8000bb0 <_read+0x12>
  }

  return len;
 8000bce:	687b      	ldr	r3, [r7, #4]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e009      	b.n	8000bfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	60ba      	str	r2, [r7, #8]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dbf1      	blt.n	8000bea <_write+0x12>
  }
  return len;
 8000c06:	687b      	ldr	r3, [r7, #4]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <_close>:

int _close(int file)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c38:	605a      	str	r2, [r3, #4]
  return 0;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_isatty>:

int _isatty(int file)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b085      	sub	sp, #20
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	60f8      	str	r0, [r7, #12]
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f003 f90e 	bl	8003ec8 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	24080000 	.word	0x24080000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	2400028c 	.word	0x2400028c
 8000ce0:	240003e0 	.word	0x240003e0

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d20 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000ce8:	f7ff fba4 	bl	8000434 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cec:	f7ff faf4 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	@ (8000d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	@ (8000d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d16:	f003 f8dd 	bl	8003ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fba5 	bl	8000468 <main>
  bx  lr
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d20:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d28:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000d2c:	0800457c 	.word	0x0800457c
  ldr r2, =_sbss
 8000d30:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8000d34:	240003e0 	.word	0x240003e0

08000d38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC3_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d42:	2003      	movs	r0, #3
 8000d44:	f000 f95e 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d48:	f002 f830 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_Init+0x68>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	4913      	ldr	r1, [pc, #76]	@ (8000da8 <HAL_Init+0x6c>)
 8000d5a:	5ccb      	ldrb	r3, [r1, r3]
 8000d5c:	f003 031f 	and.w	r3, r3, #31
 8000d60:	fa22 f303 	lsr.w	r3, r2, r3
 8000d64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <HAL_Init+0x68>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000da8 <HAL_Init+0x6c>)
 8000d70:	5cd3      	ldrb	r3, [r2, r3]
 8000d72:	f003 031f 	and.w	r3, r3, #31
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dac <HAL_Init+0x70>)
 8000d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d80:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <HAL_Init+0x74>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f814 	bl	8000db4 <HAL_InitTick>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e002      	b.n	8000d9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d96:	f7ff fdcb 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	58024400 	.word	0x58024400
 8000da8:	08004564 	.word	0x08004564
 8000dac:	24000004 	.word	0x24000004
 8000db0:	24000000 	.word	0x24000000

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_InitTick+0x60>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e021      	b.n	8000e0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <HAL_InitTick+0x64>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <HAL_InitTick+0x60>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f935 	bl	800104e <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f90d 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x68>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2400000c 	.word	0x2400000c
 8000e18:	24000000 	.word	0x24000000
 8000e1c:	24000008 	.word	0x24000008

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2400000c 	.word	0x2400000c
 8000e44:	24000290 	.word	0x24000290

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	24000290 	.word	0x24000290

08000e60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_GetREVID+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	0c1b      	lsrs	r3, r3, #16
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	5c001000 	.word	0x5c001000

08000e78 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8000e88:	4904      	ldr	r1, [pc, #16]	@ (8000e9c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	604b      	str	r3, [r1, #4]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	58000400 	.word	0x58000400

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	05fa0000 	.word	0x05fa0000

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff47 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff5e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb2 	bl	8000fc0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0e3      	b.n	8001242 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001080:	2b00      	cmp	r3, #0
 8001082:	d106      	bne.n	8001092 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2220      	movs	r2, #32
 8001088:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fc69 	bl	8000964 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	4b6e      	ldr	r3, [pc, #440]	@ (800124c <HAL_ETH_Init+0x1e4>)
 8001094:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001098:	4a6c      	ldr	r2, [pc, #432]	@ (800124c <HAL_ETH_Init+0x1e4>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010a2:	4b6a      	ldr	r3, [pc, #424]	@ (800124c <HAL_ETH_Init+0x1e4>)
 80010a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7a1b      	ldrb	r3, [r3, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d103      	bne.n	80010c0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff fedd 	bl	8000e78 <HAL_SYSCFG_ETHInterfaceSelect>
 80010be:	e003      	b.n	80010c8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80010c0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80010c4:	f7ff fed8 	bl	8000e78 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80010c8:	4b61      	ldr	r3, [pc, #388]	@ (8001250 <HAL_ETH_Init+0x1e8>)
 80010ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80010e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010e4:	f7ff feb0 	bl	8000e48 <HAL_GetTick>
 80010e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80010ea:	e011      	b.n	8001110 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010ec:	f7ff feac 	bl	8000e48 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010fa:	d909      	bls.n	8001110 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2204      	movs	r2, #4
 8001100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	22e0      	movs	r2, #224	@ 0xe0
 8001108:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      /* Return Error */
      return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e098      	b.n	8001242 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1e4      	bne.n	80010ec <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 fa78 	bl	8001618 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001128:	f001 ffba 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 800112c:	4603      	mov	r3, r0
 800112e:	4a49      	ldr	r2, [pc, #292]	@ (8001254 <HAL_ETH_Init+0x1ec>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	0c9a      	lsrs	r2, r3, #18
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3a01      	subs	r2, #1
 800113c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fca7 	bl	8001a94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800114e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001152:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800115e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001162:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d009      	beq.n	8001186 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	22e0      	movs	r2, #224	@ 0xe0
 800117e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    /* Return Error */
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e05d      	b.n	8001242 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800118e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001192:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <HAL_ETH_Init+0x1f0>)
 8001194:	4013      	ands	r3, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6952      	ldr	r2, [r2, #20]
 800119a:	0051      	lsls	r1, r2, #1
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011a6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 fd0f 	bl	8001bce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fd55 	bl	8001c60 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	3305      	adds	r3, #5
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	021a      	lsls	r2, r3, #8
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	3304      	adds	r3, #4
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	3303      	adds	r3, #3
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	061a      	lsls	r2, r3, #24
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	3302      	adds	r3, #2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	041b      	lsls	r3, r3, #16
 80011e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	3301      	adds	r3, #1
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80011f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001202:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001204:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_ETH_Init+0x1f4>)
 8001216:	430b      	orrs	r3, r1
 8001218:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_ETH_Init+0x1f8>)
 800122a:	430b      	orrs	r3, r1
 800122c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  heth->gState = HAL_ETH_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2210      	movs	r2, #16
 800123c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	58024400 	.word	0x58024400
 8001250:	58000400 	.word	0x58000400
 8001254:	431bde83 	.word	0x431bde83
 8001258:	ffff8001 	.word	0xffff8001
 800125c:	0c020060 	.word	0x0c020060
 8001260:	0c20c000 	.word	0x0c20c000

08001264 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001272:	2b10      	cmp	r3, #16
 8001274:	d165      	bne.n	8001342 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2220      	movs	r2, #32
 800127a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2204      	movs	r2, #4
 8001288:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f85e 	bl	800134c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001298:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6812      	ldr	r2, [r2, #0]
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012a8:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012c4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012d0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6812      	ldr	r2, [r2, #0]
 80012d8:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80012dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012e0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0201 	orr.w	r2, r2, #1
 80012f4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0202 	orr.w	r2, r2, #2
 8001306:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001320:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 800132c:	430b      	orrs	r3, r1
 800132e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001332:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2240      	movs	r2, #64	@ 0x40
 800133a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
  }
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001358:	2301      	movs	r3, #1
 800135a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001360:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	3212      	adds	r2, #18
 8001368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001372:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001374:	e038      	b.n	80013e8 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d112      	bne.n	80013a4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f85b 	bl	800143e <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	74fb      	strb	r3, [r7, #19]
 8001392:	e007      	b.n	80013a4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	461a      	mov	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	461a      	mov	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80013a4:	7cfb      	ldrb	r3, [r7, #19]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d01e      	beq.n	80013e8 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	e003      	b.n	80013c4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80013c2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	3301      	adds	r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d902      	bls.n	80013d6 <ETH_UpdateDescriptor+0x8a>
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	3b04      	subs	r3, #4
 80013d4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	3212      	adds	r2, #18
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	617b      	str	r3, [r7, #20]
      desccount--;
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <ETH_UpdateDescriptor+0xa8>
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1c0      	bne.n	8001376 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d01b      	beq.n	8001436 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3303      	adds	r3, #3
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001408:	f3bf 8f5f 	dmb	sy
}
 800140c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6919      	ldr	r1, [r3, #16]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	18ca      	adds	r2, r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001426:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001436:	bf00      	nop
 8001438:	3720      	adds	r7, #32
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_ETH_RxAllocateCallback>:
  * @brief  Rx Allocate callback.
  * @param  buff: pointer to allocated buffer
  * @retval None
  */
__weak void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(buff);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxAllocateCallback could be implemented in the user file
  */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_ETH_PTP_SetConfig>:
  * @param  ptpconfig: pointer to a ETH_PTP_ConfigTypeDef structure that contains
  *         the configuration information for PTP
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_PTP_SetConfig(ETH_HandleTypeDef *heth, ETH_PTP_ConfigTypeDef *ptpconfig)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tmpTSCR;
  ETH_TimeTypeDef time;

  if (ptpconfig == NULL)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_ETH_PTP_SetConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0a6      	b.n	80015b6 <HAL_ETH_PTP_SetConfig+0x162>
  }

  /* Mask the Timestamp Trigger interrupt */
  CLEAR_BIT(heth->Instance->MACIER, ETH_MACIER_TSIE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001478:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  tmpTSCR = ptpconfig->Timestamp |
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
            ((uint32_t)ptpconfig->TimestampUpdate << ETH_MACTSCR_TSUPDT_Pos) |
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	00db      	lsls	r3, r3, #3
  tmpTSCR = ptpconfig->Timestamp |
 8001486:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampAll << ETH_MACTSCR_TSENALL_Pos) |
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	021b      	lsls	r3, r3, #8
            ((uint32_t)ptpconfig->TimestampUpdate << ETH_MACTSCR_TSUPDT_Pos) |
 800148e:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampRolloverMode << ETH_MACTSCR_TSCTRLSSR_Pos) |
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	025b      	lsls	r3, r3, #9
            ((uint32_t)ptpconfig->TimestampAll << ETH_MACTSCR_TSENALL_Pos) |
 8001496:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampV2 << ETH_MACTSCR_TSVER2ENA_Pos) |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	029b      	lsls	r3, r3, #10
            ((uint32_t)ptpconfig->TimestampRolloverMode << ETH_MACTSCR_TSCTRLSSR_Pos) |
 800149e:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampEthernet << ETH_MACTSCR_TSIPENA_Pos) |
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	02db      	lsls	r3, r3, #11
            ((uint32_t)ptpconfig->TimestampV2 << ETH_MACTSCR_TSVER2ENA_Pos) |
 80014a6:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampIPv6 << ETH_MACTSCR_TSIPV6ENA_Pos) |
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	031b      	lsls	r3, r3, #12
            ((uint32_t)ptpconfig->TimestampEthernet << ETH_MACTSCR_TSIPENA_Pos) |
 80014ae:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampIPv4 << ETH_MACTSCR_TSIPV4ENA_Pos) |
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b4:	035b      	lsls	r3, r3, #13
            ((uint32_t)ptpconfig->TimestampIPv6 << ETH_MACTSCR_TSIPV6ENA_Pos) |
 80014b6:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampEvent << ETH_MACTSCR_TSEVNTENA_Pos) |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014bc:	039b      	lsls	r3, r3, #14
            ((uint32_t)ptpconfig->TimestampIPv4 << ETH_MACTSCR_TSIPV4ENA_Pos) |
 80014be:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampMaster << ETH_MACTSCR_TSMSTRENA_Pos) |
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c4:	03db      	lsls	r3, r3, #15
            ((uint32_t)ptpconfig->TimestampEvent << ETH_MACTSCR_TSEVNTENA_Pos) |
 80014c6:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampSnapshots << ETH_MACTSCR_SNAPTYPSEL_Pos) |
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014cc:	041b      	lsls	r3, r3, #16
            ((uint32_t)ptpconfig->TimestampMaster << ETH_MACTSCR_TSMSTRENA_Pos) |
 80014ce:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampFilter << ETH_MACTSCR_TSENMACADDR_Pos) |
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014d4:	049b      	lsls	r3, r3, #18
            ((uint32_t)ptpconfig->TimestampSnapshots << ETH_MACTSCR_SNAPTYPSEL_Pos) |
 80014d6:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampChecksumCorrection << ETH_MACTSCR_CSC_Pos) |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014dc:	04db      	lsls	r3, r3, #19
            ((uint32_t)ptpconfig->TimestampFilter << ETH_MACTSCR_TSENMACADDR_Pos) |
 80014de:	431a      	orrs	r2, r3
            ((uint32_t)ptpconfig->TimestampStatusMode << ETH_MACTSCR_TXTSSTSM_Pos);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	061b      	lsls	r3, r3, #24
  tmpTSCR = ptpconfig->Timestamp |
 80014e6:	4313      	orrs	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]

  /* Write to MACTSCR */
  MODIFY_REG(heth->Instance->MACTSCR, ETH_MACTSCR_MASK, tmpTSCR);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80014f2:	4b33      	ldr	r3, [pc, #204]	@ (80015c0 <HAL_ETH_PTP_SetConfig+0x16c>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	6979      	ldr	r1, [r7, #20]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	f8c2 3b00 	str.w	r3, [r2, #2816]	@ 0xb00

  /* Enable Timestamp */
  SET_BIT(heth->Instance->MACTSCR, ETH_MACTSCR_TSENA);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
  WRITE_REG(heth->Instance->MACSSIR, ptpconfig->TimestampSubsecondInc);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800151e:	f8c3 2b04 	str.w	r2, [r3, #2820]	@ 0xb04
  WRITE_REG(heth->Instance->MACTSAR, ptpconfig->TimestampAddend);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800152a:	f8c3 2b18 	str.w	r2, [r3, #2840]	@ 0xb18

  /* Enable Timestamp */
  if (ptpconfig->TimestampAddendUpdate == ENABLE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d112      	bne.n	800155c <HAL_ETH_PTP_SetConfig+0x108>
  {
    SET_BIT(heth->Instance->MACTSCR, ETH_MACTSCR_TSADDREG);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
    while ((heth->Instance->MACTSCR & ETH_MACTSCR_TSADDREG) != 0)
 800154a:	bf00      	nop
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f7      	bne.n	800154c <HAL_ETH_PTP_SetConfig+0xf8>

    }
  }

  /* Enable Update mode */
  if (ptpconfig->TimestampUpdateMode == ENABLE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d109      	bne.n	8001578 <HAL_ETH_PTP_SetConfig+0x124>
  {
    SET_BIT(heth->Instance->MACTSCR, ETH_MACTSCR_TSCFUPDT);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0202 	orr.w	r2, r2, #2
 8001574:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
  }

  /* Set PTP Configuration done */
  heth->IsPtpConfigured = HAL_ETH_PTP_CONFIGURED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Set Seconds */
  time.Seconds = heth->Instance->MACSTSR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8d3 3b08 	ldr.w	r3, [r3, #2824]	@ 0xb08
 8001588:	60fb      	str	r3, [r7, #12]
  /* Set NanoSeconds */
  time.NanoSeconds = heth->Instance->MACSTNR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8d3 3b0c 	ldr.w	r3, [r3, #2828]	@ 0xb0c
 8001592:	613b      	str	r3, [r7, #16]

  HAL_ETH_PTP_SetTime(heth, &time);
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f812 	bl	80015c4 <HAL_ETH_PTP_SetTime>

  /* Ptp Init */
  SET_BIT(heth->Instance->MACTSCR, ETH_MACTSCR_TSINIT);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0204 	orr.w	r2, r2, #4
 80015b0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	ff7800d0 	.word	0xff7800d0

080015c4 <HAL_ETH_PTP_SetTime>:
  * @param  time: pointer to a ETH_TimeTypeDef structure that contains
  *         time to set
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_PTP_SetTime(ETH_HandleTypeDef *heth, ETH_TimeTypeDef *time)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  if (heth->IsPtpConfigured == HAL_ETH_PTP_CONFIGURED)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d117      	bne.n	8001608 <HAL_ETH_PTP_SetTime+0x44>
  {
    /* Set Seconds */
    heth->Instance->MACSTSUR = time->Seconds;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10

    /* Set NanoSeconds */
    heth->Instance->MACSTNUR = time->NanoSeconds;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	6852      	ldr	r2, [r2, #4]
 80015ec:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14

    /* the system time is updated */
    SET_BIT(heth->Instance->MACTSCR, ETH_MACTSCR_TSUPDT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0208 	orr.w	r2, r2, #8
 8001600:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

    /* Return function status */
    return HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	e000      	b.n	800160a <HAL_ETH_PTP_SetTime+0x46>
  }
  else
  {
    /* Return function status */
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
  }
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001628:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001630:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001632:	f001 fd35 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 8001636:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4a1a      	ldr	r2, [pc, #104]	@ (80016a4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d804      	bhi.n	800164a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e022      	b.n	8001690 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4a16      	ldr	r2, [pc, #88]	@ (80016a8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d204      	bcs.n	800165c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e019      	b.n	8001690 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4a13      	ldr	r2, [pc, #76]	@ (80016ac <HAL_ETH_SetMDIOClockRange+0x94>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d915      	bls.n	8001690 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d804      	bhi.n	8001676 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	e00c      	b.n	8001690 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	4a0e      	ldr	r2, [pc, #56]	@ (80016b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d804      	bhi.n	8001688 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e003      	b.n	8001690 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800168e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	02160ebf 	.word	0x02160ebf
 80016a8:	03938700 	.word	0x03938700
 80016ac:	05f5e0ff 	.word	0x05f5e0ff
 80016b0:	08f0d17f 	.word	0x08f0d17f
 80016b4:	0ee6b27f 	.word	0x0ee6b27f

080016b8 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e039      	b.n	8001740 <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	78db      	ldrb	r3, [r3, #3]
 80016d6:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80016d8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	791b      	ldrb	r3, [r3, #4]
 80016de:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80016e0:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	7a1b      	ldrb	r3, [r3, #8]
 80016e6:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80016e8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	795b      	ldrb	r3, [r3, #5]
 80016ee:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 80016f0:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == ENABLE) ? 1U : 0U) << 5) |
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	7a52      	ldrb	r2, [r2, #9]
 80016f6:	2a01      	cmp	r2, #1
 80016f8:	d101      	bne.n	80016fe <HAL_ETH_SetMACFilterConfig+0x46>
 80016fa:	2220      	movs	r2, #32
 80016fc:	e000      	b.n	8001700 <HAL_ETH_SetMACFilterConfig+0x48>
 80016fe:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8001700:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	79db      	ldrb	r3, [r3, #7]
 8001706:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == ENABLE) ? 1U : 0U) << 5) |
 8001708:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	799b      	ldrb	r3, [r3, #6]
 800170e:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8001710:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	789b      	ldrb	r3, [r3, #2]
 8001716:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8001718:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	785b      	ldrb	r3, [r3, #1]
 800171e:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8001720:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8001726:	4313      	orrs	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_ETH_SetMACFilterConfig+0x94>)
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	430b      	orrs	r3, r1
 800173c:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	7ffff800 	.word	0x7ffff800

08001750 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001762:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	791b      	ldrb	r3, [r3, #4]
 8001768:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800176a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	7b1b      	ldrb	r3, [r3, #12]
 8001770:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001772:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	7b5b      	ldrb	r3, [r3, #13]
 8001778:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800177a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	7b9b      	ldrb	r3, [r3, #14]
 8001780:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001782:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	7bdb      	ldrb	r3, [r3, #15]
 8001788:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800178a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	7c12      	ldrb	r2, [r2, #16]
 8001790:	2a00      	cmp	r2, #0
 8001792:	d102      	bne.n	800179a <ETH_SetMACConfig+0x4a>
 8001794:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001798:	e000      	b.n	800179c <ETH_SetMACConfig+0x4c>
 800179a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800179c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	7c52      	ldrb	r2, [r2, #17]
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	d102      	bne.n	80017ac <ETH_SetMACConfig+0x5c>
 80017a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017aa:	e000      	b.n	80017ae <ETH_SetMACConfig+0x5e>
 80017ac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	7c9b      	ldrb	r3, [r3, #18]
 80017b4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017b6:	431a      	orrs	r2, r3
               macconf->Speed |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80017bc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80017c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	7f1b      	ldrb	r3, [r3, #28]
 80017c8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80017ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	7f5b      	ldrb	r3, [r3, #29]
 80017d0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	7f92      	ldrb	r2, [r2, #30]
 80017d8:	2a00      	cmp	r2, #0
 80017da:	d102      	bne.n	80017e2 <ETH_SetMACConfig+0x92>
 80017dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017e0:	e000      	b.n	80017e4 <ETH_SetMACConfig+0x94>
 80017e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	7fdb      	ldrb	r3, [r3, #31]
 80017ea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017f4:	2a00      	cmp	r2, #0
 80017f6:	d102      	bne.n	80017fe <ETH_SetMACConfig+0xae>
 80017f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017fc:	e000      	b.n	8001800 <ETH_SetMACConfig+0xb0>
 80017fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001800:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001806:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800180e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001810:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b56      	ldr	r3, [pc, #344]	@ (800197c <ETH_SetMACConfig+0x22c>)
 8001822:	4013      	ands	r3, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	68f9      	ldr	r1, [r7, #12]
 800182a:	430b      	orrs	r3, r1
 800182c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001832:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800183a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800183c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001844:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800184e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001850:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001858:	2a00      	cmp	r2, #0
 800185a:	d102      	bne.n	8001862 <ETH_SetMACConfig+0x112>
 800185c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001860:	e000      	b.n	8001864 <ETH_SetMACConfig+0x114>
 8001862:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001864:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4b42      	ldr	r3, [pc, #264]	@ (8001980 <ETH_SetMACConfig+0x230>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	68f9      	ldr	r1, [r7, #12]
 800187e:	430b      	orrs	r3, r1
 8001880:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001888:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800188e:	4313      	orrs	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	4b3a      	ldr	r3, [pc, #232]	@ (8001984 <ETH_SetMACConfig+0x234>)
 800189a:	4013      	ands	r3, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	430b      	orrs	r3, r1
 80018a4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018ac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80018ba:	2a00      	cmp	r2, #0
 80018bc:	d101      	bne.n	80018c2 <ETH_SetMACConfig+0x172>
 80018be:	2280      	movs	r2, #128	@ 0x80
 80018c0:	e000      	b.n	80018c4 <ETH_SetMACConfig+0x174>
 80018c2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80018c4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80018d6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80018da:	4013      	ands	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80018ec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80018f4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018f6:	4313      	orrs	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001902:	f023 0103 	bic.w	r1, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	430a      	orrs	r2, r1
 800190e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800191a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001936:	2a00      	cmp	r2, #0
 8001938:	d101      	bne.n	800193e <ETH_SetMACConfig+0x1ee>
 800193a:	2240      	movs	r2, #64	@ 0x40
 800193c:	e000      	b.n	8001940 <ETH_SetMACConfig+0x1f0>
 800193e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001940:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001948:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800194a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001952:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001954:	4313      	orrs	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001960:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	430a      	orrs	r2, r1
 800196c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	00048083 	.word	0x00048083
 8001980:	c0f88000 	.word	0xc0f88000
 8001984:	fffffef0 	.word	0xfffffef0

08001988 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b38      	ldr	r3, [pc, #224]	@ (8001a80 <ETH_SetDMAConfig+0xf8>)
 800199e:	4013      	ands	r3, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	6811      	ldr	r1, [r2, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	430b      	orrs	r3, r1
 80019aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019ae:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019ba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	7b1b      	ldrb	r3, [r3, #12]
 80019c0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <ETH_SetDMAConfig+0xfc>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	430b      	orrs	r3, r1
 80019dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019e0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	7b5b      	ldrb	r3, [r3, #13]
 80019e6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019f8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80019fc:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <ETH_SetDMAConfig+0x100>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a0c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	7d1b      	ldrb	r3, [r3, #20]
 8001a18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a1a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	7f5b      	ldrb	r3, [r3, #29]
 8001a20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001a32:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <ETH_SetDMAConfig+0x104>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a42:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	7f1b      	ldrb	r3, [r3, #28]
 8001a4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a5c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <ETH_SetDMAConfig+0x108>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	430b      	orrs	r3, r1
 8001a6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a70:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	ffff87fd 	.word	0xffff87fd
 8001a84:	ffff2ffe 	.word	0xffff2ffe
 8001a88:	fffec000 	.word	0xfffec000
 8001a8c:	ffc0efef 	.word	0xffc0efef
 8001a90:	7fc0ffff 	.word	0x7fc0ffff

08001a94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0a4      	sub	sp, #144	@ 0x90
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ad4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001aec:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001af0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b16:	2300      	movs	r3, #0
 8001b18:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b3e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b48:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b50:	2302      	movs	r3, #2
 8001b52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fde6 	bl	8001750 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b9e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ba2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ba8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001bb4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001bb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff fee1 	bl	8001988 <ETH_SetDMAConfig>
}
 8001bc6:	bf00      	nop
 8001bc8:	3790      	adds	r7, #144	@ 0x90
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	e01d      	b.n	8001c18 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68d9      	ldr	r1, [r3, #12]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	3206      	adds	r2, #6
 8001c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3301      	adds	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d9de      	bls.n	8001bdc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2303      	movs	r3, #3
 8001c30:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c40:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c50:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e023      	b.n	8001cb6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2200      	movs	r2, #0
 8001c96:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	3212      	adds	r2, #18
 8001cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d9d8      	bls.n	8001c6e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d0a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d2a:	4b89      	ldr	r3, [pc, #548]	@ (8001f50 <HAL_GPIO_Init+0x234>)
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d2e:	e194      	b.n	800205a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8186 	beq.w	8002054 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_GPIO_Init+0x44>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0201 	and.w	r2, r3, #1
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80e0 	beq.w	8002054 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b2f      	ldr	r3, [pc, #188]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <HAL_GPIO_Init+0x23c>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	@ (8001f5c <HAL_GPIO_Init+0x240>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d052      	beq.n	8001f84 <HAL_GPIO_Init+0x268>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_GPIO_Init+0x244>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_GPIO_Init+0x22e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <HAL_GPIO_Init+0x248>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02b      	beq.n	8001f46 <HAL_GPIO_Init+0x22a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <HAL_GPIO_Init+0x24c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <HAL_GPIO_Init+0x250>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_GPIO_Init+0x254>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_GPIO_Init+0x258>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <HAL_GPIO_Init+0x25c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x216>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <HAL_GPIO_Init+0x260>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x212>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <HAL_GPIO_Init+0x264>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x20e>
 8001f26:	2309      	movs	r3, #9
 8001f28:	e02d      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	e02b      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f2e:	2308      	movs	r3, #8
 8001f30:	e029      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e027      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e025      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e023      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e021      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e01f      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e01d      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01b      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f4e:	bf00      	nop
 8001f50:	58000080 	.word	0x58000080
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58000400 	.word	0x58000400
 8001f5c:	58020000 	.word	0x58020000
 8001f60:	58020400 	.word	0x58020400
 8001f64:	58020800 	.word	0x58020800
 8001f68:	58020c00 	.word	0x58020c00
 8001f6c:	58021000 	.word	0x58021000
 8001f70:	58021400 	.word	0x58021400
 8001f74:	58021800 	.word	0x58021800
 8001f78:	58021c00 	.word	0x58021c00
 8001f7c:	58022000 	.word	0x58022000
 8001f80:	58022400 	.word	0x58022400
 8001f84:	2300      	movs	r3, #0
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	f002 0203 	and.w	r2, r2, #3
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4093      	lsls	r3, r2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f96:	4938      	ldr	r1, [pc, #224]	@ (8002078 <HAL_GPIO_Init+0x35c>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ff8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	f47f ae63 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	3724      	adds	r7, #36	@ 0x24
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	58000400 	.word	0x58000400

0800207c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002084:	4a08      	ldr	r2, [pc, #32]	@ (80020a8 <HAL_HSEM_FastTake+0x2c>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3320      	adds	r3, #32
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	4a07      	ldr	r2, [pc, #28]	@ (80020ac <HAL_HSEM_FastTake+0x30>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d101      	bne.n	8002098 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e000      	b.n	800209a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	58026400 	.word	0x58026400
 80020ac:	80000300 	.word	0x80000300

080020b0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80020ba:	4906      	ldr	r1, [pc, #24]	@ (80020d4 <HAL_HSEM_Release+0x24>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	58026400 	.word	0x58026400

080020d8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80020e0:	4b29      	ldr	r3, [pc, #164]	@ (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	2b06      	cmp	r3, #6
 80020ea:	d00a      	beq.n	8002102 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020ec:	4b26      	ldr	r3, [pc, #152]	@ (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e040      	b.n	8002180 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e03e      	b.n	8002180 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002102:	4b21      	ldr	r3, [pc, #132]	@ (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800210a:	491f      	ldr	r1, [pc, #124]	@ (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4313      	orrs	r3, r2
 8002110:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002112:	f7fe fe99 	bl	8000e48 <HAL_GetTick>
 8002116:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002118:	e009      	b.n	800212e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800211a:	f7fe fe95 	bl	8000e48 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002128:	d901      	bls.n	800212e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e028      	b.n	8002180 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800212e:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002136:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800213a:	d1ee      	bne.n	800211a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b1e      	cmp	r3, #30
 8002140:	d008      	beq.n	8002154 <HAL_PWREx_ConfigSupply+0x7c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b2e      	cmp	r3, #46	@ 0x2e
 8002146:	d005      	beq.n	8002154 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b1d      	cmp	r3, #29
 800214c:	d002      	beq.n	8002154 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b2d      	cmp	r3, #45	@ 0x2d
 8002152:	d114      	bne.n	800217e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002154:	f7fe fe78 	bl	8000e48 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800215a:	e009      	b.n	8002170 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800215c:	f7fe fe74 	bl	8000e48 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800216a:	d901      	bls.n	8002170 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e007      	b.n	8002180 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002170:	4b05      	ldr	r3, [pc, #20]	@ (8002188 <HAL_PWREx_ConfigSupply+0xb0>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217c:	d1ee      	bne.n	800215c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	58024800 	.word	0x58024800

0800218c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	@ 0x30
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	f000 bc48 	b.w	8002a30 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8088 	beq.w	80022be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ae:	4b99      	ldr	r3, [pc, #612]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021b8:	4b96      	ldr	r3, [pc, #600]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d007      	beq.n	80021d4 <HAL_RCC_OscConfig+0x48>
 80021c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c6:	2b18      	cmp	r3, #24
 80021c8:	d111      	bne.n	80021ee <HAL_RCC_OscConfig+0x62>
 80021ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d10c      	bne.n	80021ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d06d      	beq.n	80022bc <HAL_RCC_OscConfig+0x130>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d169      	bne.n	80022bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	f000 bc21 	b.w	8002a30 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x7a>
 80021f8:	4b86      	ldr	r3, [pc, #536]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a85      	ldr	r2, [pc, #532]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e02e      	b.n	8002264 <HAL_RCC_OscConfig+0xd8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x9c>
 800220e:	4b81      	ldr	r3, [pc, #516]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a80      	ldr	r2, [pc, #512]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b7e      	ldr	r3, [pc, #504]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7d      	ldr	r2, [pc, #500]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002220:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e01d      	b.n	8002264 <HAL_RCC_OscConfig+0xd8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0xc0>
 8002232:	4b78      	ldr	r3, [pc, #480]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a77      	ldr	r2, [pc, #476]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b75      	ldr	r3, [pc, #468]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a74      	ldr	r2, [pc, #464]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0xd8>
 800224c:	4b71      	ldr	r3, [pc, #452]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a70      	ldr	r2, [pc, #448]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b6e      	ldr	r3, [pc, #440]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6d      	ldr	r2, [pc, #436]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe fdec 	bl	8000e48 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7fe fde8 	bl	8000e48 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	@ 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e3d4      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002286:	4b63      	ldr	r3, [pc, #396]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0xe8>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe fdd8 	bl	8000e48 <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe fdd4 	bl	8000e48 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	@ 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e3c0      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ae:	4b59      	ldr	r3, [pc, #356]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x110>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80ca 	beq.w	8002460 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022cc:	4b51      	ldr	r3, [pc, #324]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_RCC_OscConfig+0x166>
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2b18      	cmp	r3, #24
 80022e6:	d156      	bne.n	8002396 <HAL_RCC_OscConfig+0x20a>
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d151      	bne.n	8002396 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f2:	4b48      	ldr	r3, [pc, #288]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_RCC_OscConfig+0x17e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e392      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800230a:	4b42      	ldr	r3, [pc, #264]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 0219 	bic.w	r2, r3, #25
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	493f      	ldr	r1, [pc, #252]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fd94 	bl	8000e48 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7fe fd90 	bl	8000e48 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e37c      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002336:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	f7fe fd8d 	bl	8000e60 <HAL_GetREVID>
 8002346:	4603      	mov	r3, r0
 8002348:	f241 0203 	movw	r2, #4099	@ 0x1003
 800234c:	4293      	cmp	r3, r2
 800234e:	d817      	bhi.n	8002380 <HAL_RCC_OscConfig+0x1f4>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b40      	cmp	r3, #64	@ 0x40
 8002356:	d108      	bne.n	800236a <HAL_RCC_OscConfig+0x1de>
 8002358:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002360:	4a2c      	ldr	r2, [pc, #176]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002366:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002368:	e07a      	b.n	8002460 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	031b      	lsls	r3, r3, #12
 8002378:	4926      	ldr	r1, [pc, #152]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237e:	e06f      	b.n	8002460 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002380:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	061b      	lsls	r3, r3, #24
 800238e:	4921      	ldr	r1, [pc, #132]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002394:	e064      	b.n	8002460 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d047      	beq.n	800242e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800239e:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0219 	bic.w	r2, r3, #25
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	491a      	ldr	r1, [pc, #104]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7fe fd4a 	bl	8000e48 <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b8:	f7fe fd46 	bl	8000e48 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e332      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ca:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d6:	f7fe fd43 	bl	8000e60 <HAL_GetREVID>
 80023da:	4603      	mov	r3, r0
 80023dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d819      	bhi.n	8002418 <HAL_RCC_OscConfig+0x28c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b40      	cmp	r3, #64	@ 0x40
 80023ea:	d108      	bne.n	80023fe <HAL_RCC_OscConfig+0x272>
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80023f4:	4a07      	ldr	r2, [pc, #28]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 80023f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023fa:	6053      	str	r3, [r2, #4]
 80023fc:	e030      	b.n	8002460 <HAL_RCC_OscConfig+0x2d4>
 80023fe:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	031b      	lsls	r3, r3, #12
 800240c:	4901      	ldr	r1, [pc, #4]	@ (8002414 <HAL_RCC_OscConfig+0x288>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]
 8002412:	e025      	b.n	8002460 <HAL_RCC_OscConfig+0x2d4>
 8002414:	58024400 	.word	0x58024400
 8002418:	4b9a      	ldr	r3, [pc, #616]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	4997      	ldr	r1, [pc, #604]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e018      	b.n	8002460 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b95      	ldr	r3, [pc, #596]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a94      	ldr	r2, [pc, #592]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe fd05 	bl	8000e48 <HAL_GetTick>
 800243e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002442:	f7fe fd01 	bl	8000e48 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e2ed      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002454:	4b8b      	ldr	r3, [pc, #556]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a9 	beq.w	80025c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246e:	4b85      	ldr	r3, [pc, #532]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002476:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002478:	4b82      	ldr	r3, [pc, #520]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d007      	beq.n	8002494 <HAL_RCC_OscConfig+0x308>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b18      	cmp	r3, #24
 8002488:	d13a      	bne.n	8002500 <HAL_RCC_OscConfig+0x374>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d135      	bne.n	8002500 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002494:	4b7b      	ldr	r3, [pc, #492]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_OscConfig+0x320>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b80      	cmp	r3, #128	@ 0x80
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e2c1      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024ac:	f7fe fcd8 	bl	8000e60 <HAL_GetREVID>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d817      	bhi.n	80024ea <HAL_RCC_OscConfig+0x35e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d108      	bne.n	80024d4 <HAL_RCC_OscConfig+0x348>
 80024c2:	4b70      	ldr	r3, [pc, #448]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80024ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024d2:	e075      	b.n	80025c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	069b      	lsls	r3, r3, #26
 80024e2:	4968      	ldr	r1, [pc, #416]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024e8:	e06a      	b.n	80025c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024ea:	4b66      	ldr	r3, [pc, #408]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	061b      	lsls	r3, r3, #24
 80024f8:	4962      	ldr	r1, [pc, #392]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024fe:	e05f      	b.n	80025c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d042      	beq.n	800258e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002508:	4b5e      	ldr	r3, [pc, #376]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a5d      	ldr	r2, [pc, #372]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 800250e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fc98 	bl	8000e48 <HAL_GetTick>
 8002518:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800251c:	f7fe fc94 	bl	8000e48 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e280      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800252e:	4b55      	ldr	r3, [pc, #340]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800253a:	f7fe fc91 	bl	8000e60 <HAL_GetREVID>
 800253e:	4603      	mov	r3, r0
 8002540:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002544:	4293      	cmp	r3, r2
 8002546:	d817      	bhi.n	8002578 <HAL_RCC_OscConfig+0x3ec>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	2b20      	cmp	r3, #32
 800254e:	d108      	bne.n	8002562 <HAL_RCC_OscConfig+0x3d6>
 8002550:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002558:	4a4a      	ldr	r2, [pc, #296]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 800255a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800255e:	6053      	str	r3, [r2, #4]
 8002560:	e02e      	b.n	80025c0 <HAL_RCC_OscConfig+0x434>
 8002562:	4b48      	ldr	r3, [pc, #288]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	069b      	lsls	r3, r3, #26
 8002570:	4944      	ldr	r1, [pc, #272]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
 8002576:	e023      	b.n	80025c0 <HAL_RCC_OscConfig+0x434>
 8002578:	4b42      	ldr	r3, [pc, #264]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	493f      	ldr	r1, [pc, #252]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002588:	4313      	orrs	r3, r2
 800258a:	60cb      	str	r3, [r1, #12]
 800258c:	e018      	b.n	80025c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800258e:	4b3d      	ldr	r3, [pc, #244]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a3c      	ldr	r2, [pc, #240]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002594:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fc55 	bl	8000e48 <HAL_GetTick>
 800259e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025a2:	f7fe fc51 	bl	8000e48 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e23d      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025b4:	4b33      	ldr	r3, [pc, #204]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d036      	beq.n	800263a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d019      	beq.n	8002608 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 80025d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e0:	f7fe fc32 	bl	8000e48 <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e8:	f7fe fc2e 	bl	8000e48 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e21a      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025fa:	4b22      	ldr	r3, [pc, #136]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 80025fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x45c>
 8002606:	e018      	b.n	800263a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002608:	4b1e      	ldr	r3, [pc, #120]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 800260a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260c:	4a1d      	ldr	r2, [pc, #116]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7fe fc18 	bl	8000e48 <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7fe fc14 	bl	8000e48 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e200      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800262e:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b00      	cmp	r3, #0
 8002644:	d039      	beq.n	80026ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01c      	beq.n	8002688 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800264e:	4b0d      	ldr	r3, [pc, #52]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a0c      	ldr	r2, [pc, #48]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002654:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002658:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800265a:	f7fe fbf5 	bl	8000e48 <HAL_GetTick>
 800265e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002662:	f7fe fbf1 	bl	8000e48 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e1dd      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002674:	4b03      	ldr	r3, [pc, #12]	@ (8002684 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x4d6>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x52e>
 8002682:	bf00      	nop
 8002684:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002688:	4b9b      	ldr	r3, [pc, #620]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a9a      	ldr	r2, [pc, #616]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800268e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002692:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002694:	f7fe fbd8 	bl	8000e48 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800269c:	f7fe fbd4 	bl	8000e48 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e1c0      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026ae:	4b92      	ldr	r3, [pc, #584]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8081 	beq.w	80027ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026c8:	4b8c      	ldr	r3, [pc, #560]	@ (80028fc <HAL_RCC_OscConfig+0x770>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a8b      	ldr	r2, [pc, #556]	@ (80028fc <HAL_RCC_OscConfig+0x770>)
 80026ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026d4:	f7fe fbb8 	bl	8000e48 <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026dc:	f7fe fbb4 	bl	8000e48 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	@ 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1a0      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ee:	4b83      	ldr	r3, [pc, #524]	@ (80028fc <HAL_RCC_OscConfig+0x770>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d106      	bne.n	8002710 <HAL_RCC_OscConfig+0x584>
 8002702:	4b7d      	ldr	r3, [pc, #500]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	4a7c      	ldr	r2, [pc, #496]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6713      	str	r3, [r2, #112]	@ 0x70
 800270e:	e02d      	b.n	800276c <HAL_RCC_OscConfig+0x5e0>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10c      	bne.n	8002732 <HAL_RCC_OscConfig+0x5a6>
 8002718:	4b77      	ldr	r3, [pc, #476]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271c:	4a76      	ldr	r2, [pc, #472]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	@ 0x70
 8002724:	4b74      	ldr	r3, [pc, #464]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002728:	4a73      	ldr	r2, [pc, #460]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x5e0>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b05      	cmp	r3, #5
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x5c8>
 800273a:	4b6f      	ldr	r3, [pc, #444]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273e:	4a6e      	ldr	r2, [pc, #440]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6713      	str	r3, [r2, #112]	@ 0x70
 8002746:	4b6c      	ldr	r3, [pc, #432]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274a:	4a6b      	ldr	r2, [pc, #428]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6713      	str	r3, [r2, #112]	@ 0x70
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0x5e0>
 8002754:	4b68      	ldr	r3, [pc, #416]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002758:	4a67      	ldr	r2, [pc, #412]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800275a:	f023 0301 	bic.w	r3, r3, #1
 800275e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002760:	4b65      	ldr	r3, [pc, #404]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a64      	ldr	r2, [pc, #400]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fb68 	bl	8000e48 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe fb64 	bl	8000e48 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e14e      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002792:	4b59      	ldr	r3, [pc, #356]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ee      	beq.n	800277c <HAL_RCC_OscConfig+0x5f0>
 800279e:	e014      	b.n	80027ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7fe fb52 	bl	8000e48 <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7fe fb4e 	bl	8000e48 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e138      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027be:	4b4e      	ldr	r3, [pc, #312]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1ee      	bne.n	80027a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 812d 	beq.w	8002a2e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027d4:	4b48      	ldr	r3, [pc, #288]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027dc:	2b18      	cmp	r3, #24
 80027de:	f000 80bd 	beq.w	800295c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	f040 809e 	bne.w	8002928 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	4b42      	ldr	r3, [pc, #264]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a41      	ldr	r2, [pc, #260]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80027f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fb26 	bl	8000e48 <HAL_GetTick>
 80027fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe fb22 	bl	8000e48 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e10e      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002812:	4b39      	ldr	r3, [pc, #228]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800281e:	4b36      	ldr	r3, [pc, #216]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002820:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002822:	4b37      	ldr	r3, [pc, #220]	@ (8002900 <HAL_RCC_OscConfig+0x774>)
 8002824:	4013      	ands	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	430a      	orrs	r2, r1
 8002832:	4931      	ldr	r1, [pc, #196]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002834:	4313      	orrs	r3, r2
 8002836:	628b      	str	r3, [r1, #40]	@ 0x28
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	3b01      	subs	r3, #1
 800283e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002846:	3b01      	subs	r3, #1
 8002848:	025b      	lsls	r3, r3, #9
 800284a:	b29b      	uxth	r3, r3
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	3b01      	subs	r3, #1
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	3b01      	subs	r3, #1
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002868:	4923      	ldr	r1, [pc, #140]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800286a:	4313      	orrs	r3, r2
 800286c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800286e:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	4a21      	ldr	r2, [pc, #132]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800287a:	4b1f      	ldr	r3, [pc, #124]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800287c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800287e:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x778>)
 8002880:	4013      	ands	r3, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002886:	00d2      	lsls	r2, r2, #3
 8002888:	491b      	ldr	r1, [pc, #108]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800288a:	4313      	orrs	r3, r2
 800288c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800288e:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 8002890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002892:	f023 020c 	bic.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	4917      	ldr	r1, [pc, #92]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 800289c:	4313      	orrs	r3, r2
 800289e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028a0:	4b15      	ldr	r3, [pc, #84]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	f023 0202 	bic.w	r2, r3, #2
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ac:	4912      	ldr	r1, [pc, #72]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028b2:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b6:	4a10      	ldr	r2, [pc, #64]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	4a0d      	ldr	r2, [pc, #52]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028ca:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	4a0a      	ldr	r2, [pc, #40]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028d6:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	4a07      	ldr	r2, [pc, #28]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e2:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <HAL_RCC_OscConfig+0x76c>)
 80028e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ee:	f7fe faab 	bl	8000e48 <HAL_GetTick>
 80028f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028f4:	e011      	b.n	800291a <HAL_RCC_OscConfig+0x78e>
 80028f6:	bf00      	nop
 80028f8:	58024400 	.word	0x58024400
 80028fc:	58024800 	.word	0x58024800
 8002900:	fffffc0c 	.word	0xfffffc0c
 8002904:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fa9e 	bl	8000e48 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e08a      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800291a:	4b47      	ldr	r3, [pc, #284]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x77c>
 8002926:	e082      	b.n	8002a2e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002928:	4b43      	ldr	r3, [pc, #268]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a42      	ldr	r2, [pc, #264]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 800292e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fa88 	bl	8000e48 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293c:	f7fe fa84 	bl	8000e48 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e070      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800294e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x7b0>
 800295a:	e068      	b.n	8002a2e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800295c:	4b36      	ldr	r3, [pc, #216]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002962:	4b35      	ldr	r3, [pc, #212]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	2b01      	cmp	r3, #1
 800296e:	d031      	beq.n	80029d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f003 0203 	and.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d12a      	bne.n	80029d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	429a      	cmp	r2, r3
 800298c:	d122      	bne.n	80029d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800299a:	429a      	cmp	r2, r3
 800299c:	d11a      	bne.n	80029d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	0a5b      	lsrs	r3, r3, #9
 80029a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d111      	bne.n	80029d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d108      	bne.n	80029d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0e1b      	lsrs	r3, r3, #24
 80029c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e02b      	b.n	8002a30 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029d8:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 80029da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029dc:	08db      	lsrs	r3, r3, #3
 80029de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d01f      	beq.n	8002a2e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80029ee:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 80029f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f2:	4a11      	ldr	r2, [pc, #68]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029fa:	f7fe fa25 	bl	8000e48 <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a00:	bf00      	nop
 8002a02:	f7fe fa21 	bl	8000e48 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d0f9      	beq.n	8002a02 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 8002a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_RCC_OscConfig+0x8b0>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a1a:	00d2      	lsls	r2, r2, #3
 8002a1c:	4906      	ldr	r1, [pc, #24]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a22:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 8002a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a26:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <HAL_RCC_OscConfig+0x8ac>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3730      	adds	r7, #48	@ 0x30
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	58024400 	.word	0x58024400
 8002a3c:	ffff0007 	.word	0xffff0007

08002a40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e19c      	b.n	8002d8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b8a      	ldr	r3, [pc, #552]	@ (8002c80 <HAL_RCC_ClockConfig+0x240>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d910      	bls.n	8002a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b87      	ldr	r3, [pc, #540]	@ (8002c80 <HAL_RCC_ClockConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 020f 	bic.w	r2, r3, #15
 8002a6a:	4985      	ldr	r1, [pc, #532]	@ (8002c80 <HAL_RCC_ClockConfig+0x240>)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b83      	ldr	r3, [pc, #524]	@ (8002c80 <HAL_RCC_ClockConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e184      	b.n	8002d8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d010      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	4b7b      	ldr	r3, [pc, #492]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d908      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002aa0:	4b78      	ldr	r3, [pc, #480]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	4975      	ldr	r1, [pc, #468]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d010      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	4b70      	ldr	r3, [pc, #448]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d908      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ace:	4b6d      	ldr	r3, [pc, #436]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	496a      	ldr	r1, [pc, #424]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d010      	beq.n	8002b0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	4b64      	ldr	r3, [pc, #400]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d908      	bls.n	8002b0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002afc:	4b61      	ldr	r3, [pc, #388]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	495e      	ldr	r1, [pc, #376]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d010      	beq.n	8002b3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	4b59      	ldr	r3, [pc, #356]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d908      	bls.n	8002b3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b2a:	4b56      	ldr	r3, [pc, #344]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4953      	ldr	r1, [pc, #332]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d010      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d908      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b4a      	ldr	r3, [pc, #296]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f023 020f 	bic.w	r2, r3, #15
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4947      	ldr	r1, [pc, #284]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d055      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b76:	4b43      	ldr	r3, [pc, #268]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4940      	ldr	r1, [pc, #256]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d107      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b90:	4b3c      	ldr	r3, [pc, #240]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d121      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0f6      	b.n	8002d8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ba8:	4b36      	ldr	r3, [pc, #216]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d115      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0ea      	b.n	8002d8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bc0:	4b30      	ldr	r3, [pc, #192]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0de      	b.n	8002d8e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0d6      	b.n	8002d8e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002be0:	4b28      	ldr	r3, [pc, #160]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f023 0207 	bic.w	r2, r3, #7
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4925      	ldr	r1, [pc, #148]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf2:	f7fe f929 	bl	8000e48 <HAL_GetTick>
 8002bf6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfa:	f7fe f925 	bl	8000e48 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e0be      	b.n	8002d8e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c10:	4b1c      	ldr	r3, [pc, #112]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d1eb      	bne.n	8002bfa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d208      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	490e      	ldr	r1, [pc, #56]	@ (8002c84 <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c50:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <HAL_RCC_ClockConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d214      	bcs.n	8002c88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <HAL_RCC_ClockConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 020f 	bic.w	r2, r3, #15
 8002c66:	4906      	ldr	r1, [pc, #24]	@ (8002c80 <HAL_RCC_ClockConfig+0x240>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b04      	ldr	r3, [pc, #16]	@ (8002c80 <HAL_RCC_ClockConfig+0x240>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e086      	b.n	8002d8e <HAL_RCC_ClockConfig+0x34e>
 8002c80:	52002000 	.word	0x52002000
 8002c84:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d010      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	4b3f      	ldr	r3, [pc, #252]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d208      	bcs.n	8002cb6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	4939      	ldr	r1, [pc, #228]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	4b34      	ldr	r3, [pc, #208]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d208      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cd2:	4b31      	ldr	r3, [pc, #196]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	492e      	ldr	r1, [pc, #184]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699a      	ldr	r2, [r3, #24]
 8002cf4:	4b28      	ldr	r3, [pc, #160]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d208      	bcs.n	8002d12 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d00:	4b25      	ldr	r3, [pc, #148]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	4922      	ldr	r1, [pc, #136]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d010      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69da      	ldr	r2, [r3, #28]
 8002d22:	4b1d      	ldr	r3, [pc, #116]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d208      	bcs.n	8002d40 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4917      	ldr	r1, [pc, #92]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d40:	f000 f834 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	f003 030f 	and.w	r3, r3, #15
 8002d50:	4912      	ldr	r1, [pc, #72]	@ (8002d9c <HAL_RCC_ClockConfig+0x35c>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <HAL_RCC_ClockConfig+0x358>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <HAL_RCC_ClockConfig+0x35c>)
 8002d68:	5cd3      	ldrb	r3, [r2, r3]
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
 8002d74:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <HAL_RCC_ClockConfig+0x360>)
 8002d76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d78:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <HAL_RCC_ClockConfig+0x364>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <HAL_RCC_ClockConfig+0x368>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe f816 	bl	8000db4 <HAL_InitTick>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	58024400 	.word	0x58024400
 8002d9c:	08004564 	.word	0x08004564
 8002da0:	24000004 	.word	0x24000004
 8002da4:	24000000 	.word	0x24000000
 8002da8:	24000008 	.word	0x24000008

08002dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db2:	4bb3      	ldr	r3, [pc, #716]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dba:	2b18      	cmp	r3, #24
 8002dbc:	f200 8155 	bhi.w	800306a <HAL_RCC_GetSysClockFreq+0x2be>
 8002dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002e2d 	.word	0x08002e2d
 8002dcc:	0800306b 	.word	0x0800306b
 8002dd0:	0800306b 	.word	0x0800306b
 8002dd4:	0800306b 	.word	0x0800306b
 8002dd8:	0800306b 	.word	0x0800306b
 8002ddc:	0800306b 	.word	0x0800306b
 8002de0:	0800306b 	.word	0x0800306b
 8002de4:	0800306b 	.word	0x0800306b
 8002de8:	08002e53 	.word	0x08002e53
 8002dec:	0800306b 	.word	0x0800306b
 8002df0:	0800306b 	.word	0x0800306b
 8002df4:	0800306b 	.word	0x0800306b
 8002df8:	0800306b 	.word	0x0800306b
 8002dfc:	0800306b 	.word	0x0800306b
 8002e00:	0800306b 	.word	0x0800306b
 8002e04:	0800306b 	.word	0x0800306b
 8002e08:	08002e59 	.word	0x08002e59
 8002e0c:	0800306b 	.word	0x0800306b
 8002e10:	0800306b 	.word	0x0800306b
 8002e14:	0800306b 	.word	0x0800306b
 8002e18:	0800306b 	.word	0x0800306b
 8002e1c:	0800306b 	.word	0x0800306b
 8002e20:	0800306b 	.word	0x0800306b
 8002e24:	0800306b 	.word	0x0800306b
 8002e28:	08002e5f 	.word	0x08002e5f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e2c:	4b94      	ldr	r3, [pc, #592]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d009      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e38:	4b91      	ldr	r3, [pc, #580]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	4a90      	ldr	r2, [pc, #576]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
 8002e48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e4a:	e111      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e4c:	4b8d      	ldr	r3, [pc, #564]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e4e:	61bb      	str	r3, [r7, #24]
      break;
 8002e50:	e10e      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e52:	4b8d      	ldr	r3, [pc, #564]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e54:	61bb      	str	r3, [r7, #24]
      break;
 8002e56:	e10b      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e58:	4b8c      	ldr	r3, [pc, #560]	@ (800308c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e5a:	61bb      	str	r3, [r7, #24]
      break;
 8002e5c:	e108      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e5e:	4b88      	ldr	r3, [pc, #544]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e68:	4b85      	ldr	r3, [pc, #532]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e72:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e74:	4b82      	ldr	r3, [pc, #520]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e7e:	4b80      	ldr	r3, [pc, #512]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e82:	08db      	lsrs	r3, r3, #3
 8002e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e96:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80e1 	beq.w	8003064 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	f000 8083 	beq.w	8002fb0 <HAL_RCC_GetSysClockFreq+0x204>
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	f200 80a1 	bhi.w	8002ff4 <HAL_RCC_GetSysClockFreq+0x248>
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x114>
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d056      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ebe:	e099      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d02d      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ecc:	4b6c      	ldr	r3, [pc, #432]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	08db      	lsrs	r3, r3, #3
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	4a6b      	ldr	r2, [pc, #428]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	ee07 3a90 	vmov	s15, r3
 8002ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef6:	4b62      	ldr	r3, [pc, #392]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f0a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f22:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f26:	e087      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	ee07 3a90 	vmov	s15, r3
 8002f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f32:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003094 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f3a:	4b51      	ldr	r3, [pc, #324]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f4e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f6a:	e065      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f76:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003098 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f7e:	4b40      	ldr	r3, [pc, #256]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f92:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002faa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fae:	e043      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800309c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fd6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003090 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ff2:	e021      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ffe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003098 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003006:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003016:	ed97 6a02 	vldr	s12, [r7, #8]
 800301a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003090 <HAL_RCC_GetSysClockFreq+0x2e4>
 800301e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800302a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003032:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003036:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	0a5b      	lsrs	r3, r3, #9
 800303e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003042:	3301      	adds	r3, #1
 8003044:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	ee07 3a90 	vmov	s15, r3
 800304c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003050:	edd7 6a07 	vldr	s13, [r7, #28]
 8003054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800305c:	ee17 3a90 	vmov	r3, s15
 8003060:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003062:	e005      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
      break;
 8003068:	e002      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800306a:	4b07      	ldr	r3, [pc, #28]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800306c:	61bb      	str	r3, [r7, #24]
      break;
 800306e:	bf00      	nop
  }

  return sysclockfreq;
 8003070:	69bb      	ldr	r3, [r7, #24]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	@ 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	58024400 	.word	0x58024400
 8003084:	03d09000 	.word	0x03d09000
 8003088:	003d0900 	.word	0x003d0900
 800308c:	017d7840 	.word	0x017d7840
 8003090:	46000000 	.word	0x46000000
 8003094:	4c742400 	.word	0x4c742400
 8003098:	4a742400 	.word	0x4a742400
 800309c:	4bbebc20 	.word	0x4bbebc20

080030a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80030a6:	f7ff fe81 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 80030aa:	4602      	mov	r2, r0
 80030ac:	4b10      	ldr	r3, [pc, #64]	@ (80030f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	490f      	ldr	r1, [pc, #60]	@ (80030f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80030b8:	5ccb      	ldrb	r3, [r1, r3]
 80030ba:	f003 031f 	and.w	r3, r3, #31
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030c4:	4b0a      	ldr	r3, [pc, #40]	@ (80030f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	4a09      	ldr	r2, [pc, #36]	@ (80030f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	fa22 f303 	lsr.w	r3, r2, r3
 80030da:	4a07      	ldr	r2, [pc, #28]	@ (80030f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80030dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030de:	4a07      	ldr	r2, [pc, #28]	@ (80030fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030e4:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	58024400 	.word	0x58024400
 80030f4:	08004564 	.word	0x08004564
 80030f8:	24000004 	.word	0x24000004
 80030fc:	24000000 	.word	0x24000000

08003100 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *pInit)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8003108:	4b26      	ldr	r3, [pc, #152]	@ (80031a4 <HAL_RCCEx_CRSConfig+0xa4>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310e:	4a25      	ldr	r2, [pc, #148]	@ (80031a4 <HAL_RCCEx_CRSConfig+0xa4>)
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8003118:	4b22      	ldr	r3, [pc, #136]	@ (80031a4 <HAL_RCCEx_CRSConfig+0xa4>)
 800311a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311e:	4a21      	ldr	r2, [pc, #132]	@ (80031a4 <HAL_RCCEx_CRSConfig+0xa4>)
 8003120:	f023 0302 	bic.w	r3, r3, #2
 8003124:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8003128:	f7fd fe9a 	bl	8000e60 <HAL_GetREVID>
 800312c:	4603      	mov	r3, r0
 800312e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003132:	4293      	cmp	r3, r2
 8003134:	d80b      	bhi.n	800314e <HAL_RCCEx_CRSConfig+0x4e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800313e:	d106      	bne.n	800314e <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4313      	orrs	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e008      	b.n	8003160 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8003176:	4a0c      	ldr	r2, [pc, #48]	@ (80031a8 <HAL_RCCEx_CRSConfig+0xa8>)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800317c:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <HAL_RCCEx_CRSConfig+0xa8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	4907      	ldr	r1, [pc, #28]	@ (80031a8 <HAL_RCCEx_CRSConfig+0xa8>)
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8003190:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <HAL_RCCEx_CRSConfig+0xa8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a04      	ldr	r2, [pc, #16]	@ (80031a8 <HAL_RCCEx_CRSConfig+0xa8>)
 8003196:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800319a:	6013      	str	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	58024400 	.word	0x58024400
 80031a8:	40008400 	.word	0x40008400

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e049      	b.n	8003252 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fd fc94 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 f970 	bl	80034d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_TIM_ConfigClockSource+0x1c>
 8003274:	2302      	movs	r3, #2
 8003276:	e0dc      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x1d6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	4b6a      	ldr	r3, [pc, #424]	@ (800343c <HAL_TIM_ConfigClockSource+0x1e0>)
 8003294:	4013      	ands	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800329e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a64      	ldr	r2, [pc, #400]	@ (8003440 <HAL_TIM_ConfigClockSource+0x1e4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	f000 80a9 	beq.w	8003406 <HAL_TIM_ConfigClockSource+0x1aa>
 80032b4:	4a62      	ldr	r2, [pc, #392]	@ (8003440 <HAL_TIM_ConfigClockSource+0x1e4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	f200 80ae 	bhi.w	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 80032bc:	4a61      	ldr	r2, [pc, #388]	@ (8003444 <HAL_TIM_ConfigClockSource+0x1e8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	f000 80a1 	beq.w	8003406 <HAL_TIM_ConfigClockSource+0x1aa>
 80032c4:	4a5f      	ldr	r2, [pc, #380]	@ (8003444 <HAL_TIM_ConfigClockSource+0x1e8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f200 80a6 	bhi.w	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 80032cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003448 <HAL_TIM_ConfigClockSource+0x1ec>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	f000 8099 	beq.w	8003406 <HAL_TIM_ConfigClockSource+0x1aa>
 80032d4:	4a5c      	ldr	r2, [pc, #368]	@ (8003448 <HAL_TIM_ConfigClockSource+0x1ec>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	f200 809e 	bhi.w	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 80032dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80032e0:	f000 8091 	beq.w	8003406 <HAL_TIM_ConfigClockSource+0x1aa>
 80032e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80032e8:	f200 8096 	bhi.w	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 80032ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f0:	f000 8089 	beq.w	8003406 <HAL_TIM_ConfigClockSource+0x1aa>
 80032f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f8:	f200 808e 	bhi.w	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 80032fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003300:	d03e      	beq.n	8003380 <HAL_TIM_ConfigClockSource+0x124>
 8003302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003306:	f200 8087 	bhi.w	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 800330a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800330e:	f000 8086 	beq.w	800341e <HAL_TIM_ConfigClockSource+0x1c2>
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003316:	d87f      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 8003318:	2b70      	cmp	r3, #112	@ 0x70
 800331a:	d01a      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0xf6>
 800331c:	2b70      	cmp	r3, #112	@ 0x70
 800331e:	d87b      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 8003320:	2b60      	cmp	r3, #96	@ 0x60
 8003322:	d050      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x16a>
 8003324:	2b60      	cmp	r3, #96	@ 0x60
 8003326:	d877      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 8003328:	2b50      	cmp	r3, #80	@ 0x50
 800332a:	d03c      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x14a>
 800332c:	2b50      	cmp	r3, #80	@ 0x50
 800332e:	d873      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 8003330:	2b40      	cmp	r3, #64	@ 0x40
 8003332:	d058      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0x18a>
 8003334:	2b40      	cmp	r3, #64	@ 0x40
 8003336:	d86f      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 8003338:	2b30      	cmp	r3, #48	@ 0x30
 800333a:	d064      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x1aa>
 800333c:	2b30      	cmp	r3, #48	@ 0x30
 800333e:	d86b      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 8003340:	2b20      	cmp	r3, #32
 8003342:	d060      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x1aa>
 8003344:	2b20      	cmp	r3, #32
 8003346:	d867      	bhi.n	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d05c      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x1aa>
 800334c:	2b10      	cmp	r3, #16
 800334e:	d05a      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x1aa>
 8003350:	e062      	b.n	8003418 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003362:	f000 fabd 	bl	80038e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	609a      	str	r2, [r3, #8]
      break;
 800337e:	e04f      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003390:	f000 faa6 	bl	80038e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033a2:	609a      	str	r2, [r3, #8]
      break;
 80033a4:	e03c      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b2:	461a      	mov	r2, r3
 80033b4:	f000 fa16 	bl	80037e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2150      	movs	r1, #80	@ 0x50
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fa70 	bl	80038a4 <TIM_ITRx_SetConfig>
      break;
 80033c4:	e02c      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d2:	461a      	mov	r2, r3
 80033d4:	f000 fa35 	bl	8003842 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2160      	movs	r1, #96	@ 0x60
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fa60 	bl	80038a4 <TIM_ITRx_SetConfig>
      break;
 80033e4:	e01c      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f2:	461a      	mov	r2, r3
 80033f4:	f000 f9f6 	bl	80037e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2140      	movs	r1, #64	@ 0x40
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fa50 	bl	80038a4 <TIM_ITRx_SetConfig>
      break;
 8003404:	e00c      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f000 fa47 	bl	80038a4 <TIM_ITRx_SetConfig>
      break;
 8003416:	e003      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      break;
 800341c:	e000      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800341e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	ffceff88 	.word	0xffceff88
 8003440:	00100040 	.word	0x00100040
 8003444:	00100030 	.word	0x00100030
 8003448:	00100020 	.word	0x00100020

0800344c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003460:	2302      	movs	r3, #2
 8003462:	e031      	b.n	80034c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f8ca 	bl	8003610 <TIM_SlaveTimer_SetConfig>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e018      	b.n	80034c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a43      	ldr	r2, [pc, #268]	@ (80035f0 <TIM_Base_SetConfig+0x120>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d013      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ee:	d00f      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a40      	ldr	r2, [pc, #256]	@ (80035f4 <TIM_Base_SetConfig+0x124>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00b      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3f      	ldr	r2, [pc, #252]	@ (80035f8 <TIM_Base_SetConfig+0x128>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3e      	ldr	r2, [pc, #248]	@ (80035fc <TIM_Base_SetConfig+0x12c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d003      	beq.n	8003510 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3d      	ldr	r2, [pc, #244]	@ (8003600 <TIM_Base_SetConfig+0x130>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d108      	bne.n	8003522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a32      	ldr	r2, [pc, #200]	@ (80035f0 <TIM_Base_SetConfig+0x120>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01f      	beq.n	800356a <TIM_Base_SetConfig+0x9a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003530:	d01b      	beq.n	800356a <TIM_Base_SetConfig+0x9a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2f      	ldr	r2, [pc, #188]	@ (80035f4 <TIM_Base_SetConfig+0x124>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d017      	beq.n	800356a <TIM_Base_SetConfig+0x9a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2e      	ldr	r2, [pc, #184]	@ (80035f8 <TIM_Base_SetConfig+0x128>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <TIM_Base_SetConfig+0x9a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2d      	ldr	r2, [pc, #180]	@ (80035fc <TIM_Base_SetConfig+0x12c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00f      	beq.n	800356a <TIM_Base_SetConfig+0x9a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2c      	ldr	r2, [pc, #176]	@ (8003600 <TIM_Base_SetConfig+0x130>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00b      	beq.n	800356a <TIM_Base_SetConfig+0x9a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2b      	ldr	r2, [pc, #172]	@ (8003604 <TIM_Base_SetConfig+0x134>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <TIM_Base_SetConfig+0x9a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2a      	ldr	r2, [pc, #168]	@ (8003608 <TIM_Base_SetConfig+0x138>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0x9a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a29      	ldr	r2, [pc, #164]	@ (800360c <TIM_Base_SetConfig+0x13c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d108      	bne.n	800357c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <TIM_Base_SetConfig+0x120>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00f      	beq.n	80035c2 <TIM_Base_SetConfig+0xf2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a16      	ldr	r2, [pc, #88]	@ (8003600 <TIM_Base_SetConfig+0x130>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00b      	beq.n	80035c2 <TIM_Base_SetConfig+0xf2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a15      	ldr	r2, [pc, #84]	@ (8003604 <TIM_Base_SetConfig+0x134>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <TIM_Base_SetConfig+0xf2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a14      	ldr	r2, [pc, #80]	@ (8003608 <TIM_Base_SetConfig+0x138>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_Base_SetConfig+0xf2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a13      	ldr	r2, [pc, #76]	@ (800360c <TIM_Base_SetConfig+0x13c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d103      	bne.n	80035ca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f043 0204 	orr.w	r2, r3, #4
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40010400 	.word	0x40010400
 8003604:	40014000 	.word	0x40014000
 8003608:	40014400 	.word	0x40014400
 800360c:	40014800 	.word	0x40014800

08003610 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4b65      	ldr	r3, [pc, #404]	@ (80037c0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4b62      	ldr	r3, [pc, #392]	@ (80037c4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4a5c      	ldr	r2, [pc, #368]	@ (80037c8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	f000 80ab 	beq.w	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800365e:	4a5a      	ldr	r2, [pc, #360]	@ (80037c8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	f200 80a4 	bhi.w	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 8003666:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800366a:	f000 80a3 	beq.w	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800366e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003672:	f200 809c 	bhi.w	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 8003676:	4a55      	ldr	r2, [pc, #340]	@ (80037cc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	f000 809b 	beq.w	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800367e:	4a53      	ldr	r2, [pc, #332]	@ (80037cc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	f200 8094 	bhi.w	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 8003686:	4a52      	ldr	r2, [pc, #328]	@ (80037d0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	f000 8093 	beq.w	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800368e:	4a50      	ldr	r2, [pc, #320]	@ (80037d0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	f200 808c 	bhi.w	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 8003696:	4a4f      	ldr	r2, [pc, #316]	@ (80037d4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	f000 808b 	beq.w	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800369e:	4a4d      	ldr	r2, [pc, #308]	@ (80037d4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	f200 8084 	bhi.w	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 80036a6:	4a4c      	ldr	r2, [pc, #304]	@ (80037d8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	f000 8083 	beq.w	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80036ae:	4a4a      	ldr	r2, [pc, #296]	@ (80037d8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d87c      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 80036b4:	4a49      	ldr	r2, [pc, #292]	@ (80037dc <TIM_SlaveTimer_SetConfig+0x1cc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d07c      	beq.n	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80036ba:	4a48      	ldr	r2, [pc, #288]	@ (80037dc <TIM_SlaveTimer_SetConfig+0x1cc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d876      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 80036c0:	4a47      	ldr	r2, [pc, #284]	@ (80037e0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d076      	beq.n	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80036c6:	4a46      	ldr	r2, [pc, #280]	@ (80037e0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d870      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 80036cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80036d0:	d070      	beq.n	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80036d2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80036d6:	d86a      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 80036d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036dc:	d06a      	beq.n	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80036de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036e2:	d864      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 80036e4:	2b70      	cmp	r3, #112	@ 0x70
 80036e6:	d01a      	beq.n	800371e <TIM_SlaveTimer_SetConfig+0x10e>
 80036e8:	2b70      	cmp	r3, #112	@ 0x70
 80036ea:	d860      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 80036ec:	2b60      	cmp	r3, #96	@ 0x60
 80036ee:	d054      	beq.n	800379a <TIM_SlaveTimer_SetConfig+0x18a>
 80036f0:	2b60      	cmp	r3, #96	@ 0x60
 80036f2:	d85c      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 80036f4:	2b50      	cmp	r3, #80	@ 0x50
 80036f6:	d046      	beq.n	8003786 <TIM_SlaveTimer_SetConfig+0x176>
 80036f8:	2b50      	cmp	r3, #80	@ 0x50
 80036fa:	d858      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 80036fc:	2b40      	cmp	r3, #64	@ 0x40
 80036fe:	d019      	beq.n	8003734 <TIM_SlaveTimer_SetConfig+0x124>
 8003700:	2b40      	cmp	r3, #64	@ 0x40
 8003702:	d854      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 8003704:	2b30      	cmp	r3, #48	@ 0x30
 8003706:	d055      	beq.n	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003708:	2b30      	cmp	r3, #48	@ 0x30
 800370a:	d850      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d051      	beq.n	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003710:	2b20      	cmp	r3, #32
 8003712:	d84c      	bhi.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d04d      	beq.n	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003718:	2b10      	cmp	r3, #16
 800371a:	d04b      	beq.n	80037b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800371c:	e047      	b.n	80037ae <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800372e:	f000 f8d7 	bl	80038e0 <TIM_ETR_SetConfig>
      break;
 8003732:	e040      	b.n	80037b6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d101      	bne.n	8003740 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e03b      	b.n	80037b8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003766:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4313      	orrs	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	621a      	str	r2, [r3, #32]
      break;
 8003784:	e017      	b.n	80037b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003792:	461a      	mov	r2, r3
 8003794:	f000 f826 	bl	80037e4 <TIM_TI1_ConfigInputStage>
      break;
 8003798:	e00d      	b.n	80037b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a6:	461a      	mov	r2, r3
 80037a8:	f000 f84b 	bl	8003842 <TIM_TI2_ConfigInputStage>
      break;
 80037ac:	e003      	b.n	80037b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
      break;
 80037b2:	e000      	b.n	80037b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80037b4:	bf00      	nop
  }

  return status;
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	ffcfff8f 	.word	0xffcfff8f
 80037c4:	fffefff8 	.word	0xfffefff8
 80037c8:	00200010 	.word	0x00200010
 80037cc:	00100070 	.word	0x00100070
 80037d0:	00100060 	.word	0x00100060
 80037d4:	00100050 	.word	0x00100050
 80037d8:	00100040 	.word	0x00100040
 80037dc:	00100030 	.word	0x00100030
 80037e0:	00100020 	.word	0x00100020

080037e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	f023 0201 	bic.w	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800380e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f023 030a 	bic.w	r3, r3, #10
 8003820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003842:	b480      	push	{r7}
 8003844:	b087      	sub	sp, #28
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f023 0210 	bic.w	r2, r3, #16
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800386c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	031b      	lsls	r3, r3, #12
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800387e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <TIM_ITRx_SetConfig+0x38>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f043 0307 	orr.w	r3, r3, #7
 80038c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	609a      	str	r2, [r3, #8]
}
 80038ce:	bf00      	nop
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	ffcfff8f 	.word	0xffcfff8f

080038e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	021a      	lsls	r2, r3, #8
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	431a      	orrs	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	609a      	str	r2, [r3, #8]
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003934:	2302      	movs	r3, #2
 8003936:	e06d      	b.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a30      	ldr	r2, [pc, #192]	@ (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2f      	ldr	r2, [pc, #188]	@ (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d108      	bne.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003984:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a20      	ldr	r2, [pc, #128]	@ (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d022      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039aa:	d01d      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d018      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1c      	ldr	r2, [pc, #112]	@ (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a15      	ldr	r2, [pc, #84]	@ (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a16      	ldr	r2, [pc, #88]	@ (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a15      	ldr	r2, [pc, #84]	@ (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d10c      	bne.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010400 	.word	0x40010400
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40001800 	.word	0x40001800
 8003a38:	40014000 	.word	0x40014000

08003a3c <std>:
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	b510      	push	{r4, lr}
 8003a40:	4604      	mov	r4, r0
 8003a42:	e9c0 3300 	strd	r3, r3, [r0]
 8003a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a4a:	6083      	str	r3, [r0, #8]
 8003a4c:	8181      	strh	r1, [r0, #12]
 8003a4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a50:	81c2      	strh	r2, [r0, #14]
 8003a52:	6183      	str	r3, [r0, #24]
 8003a54:	4619      	mov	r1, r3
 8003a56:	2208      	movs	r2, #8
 8003a58:	305c      	adds	r0, #92	@ 0x5c
 8003a5a:	f000 f9e7 	bl	8003e2c <memset>
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <std+0x58>)
 8003a60:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a62:	4b0d      	ldr	r3, [pc, #52]	@ (8003a98 <std+0x5c>)
 8003a64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a66:	4b0d      	ldr	r3, [pc, #52]	@ (8003a9c <std+0x60>)
 8003a68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <std+0x64>)
 8003a6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <std+0x68>)
 8003a70:	6224      	str	r4, [r4, #32]
 8003a72:	429c      	cmp	r4, r3
 8003a74:	d006      	beq.n	8003a84 <std+0x48>
 8003a76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003a7a:	4294      	cmp	r4, r2
 8003a7c:	d002      	beq.n	8003a84 <std+0x48>
 8003a7e:	33d0      	adds	r3, #208	@ 0xd0
 8003a80:	429c      	cmp	r4, r3
 8003a82:	d105      	bne.n	8003a90 <std+0x54>
 8003a84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a8c:	f000 ba46 	b.w	8003f1c <__retarget_lock_init_recursive>
 8003a90:	bd10      	pop	{r4, pc}
 8003a92:	bf00      	nop
 8003a94:	08003c7d 	.word	0x08003c7d
 8003a98:	08003c9f 	.word	0x08003c9f
 8003a9c:	08003cd7 	.word	0x08003cd7
 8003aa0:	08003cfb 	.word	0x08003cfb
 8003aa4:	24000294 	.word	0x24000294

08003aa8 <stdio_exit_handler>:
 8003aa8:	4a02      	ldr	r2, [pc, #8]	@ (8003ab4 <stdio_exit_handler+0xc>)
 8003aaa:	4903      	ldr	r1, [pc, #12]	@ (8003ab8 <stdio_exit_handler+0x10>)
 8003aac:	4803      	ldr	r0, [pc, #12]	@ (8003abc <stdio_exit_handler+0x14>)
 8003aae:	f000 b869 	b.w	8003b84 <_fwalk_sglue>
 8003ab2:	bf00      	nop
 8003ab4:	24000010 	.word	0x24000010
 8003ab8:	0800421d 	.word	0x0800421d
 8003abc:	24000020 	.word	0x24000020

08003ac0 <cleanup_stdio>:
 8003ac0:	6841      	ldr	r1, [r0, #4]
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8003af4 <cleanup_stdio+0x34>)
 8003ac4:	4299      	cmp	r1, r3
 8003ac6:	b510      	push	{r4, lr}
 8003ac8:	4604      	mov	r4, r0
 8003aca:	d001      	beq.n	8003ad0 <cleanup_stdio+0x10>
 8003acc:	f000 fba6 	bl	800421c <_fflush_r>
 8003ad0:	68a1      	ldr	r1, [r4, #8]
 8003ad2:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <cleanup_stdio+0x38>)
 8003ad4:	4299      	cmp	r1, r3
 8003ad6:	d002      	beq.n	8003ade <cleanup_stdio+0x1e>
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f000 fb9f 	bl	800421c <_fflush_r>
 8003ade:	68e1      	ldr	r1, [r4, #12]
 8003ae0:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <cleanup_stdio+0x3c>)
 8003ae2:	4299      	cmp	r1, r3
 8003ae4:	d004      	beq.n	8003af0 <cleanup_stdio+0x30>
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aec:	f000 bb96 	b.w	800421c <_fflush_r>
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	bf00      	nop
 8003af4:	24000294 	.word	0x24000294
 8003af8:	240002fc 	.word	0x240002fc
 8003afc:	24000364 	.word	0x24000364

08003b00 <global_stdio_init.part.0>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	4b0b      	ldr	r3, [pc, #44]	@ (8003b30 <global_stdio_init.part.0+0x30>)
 8003b04:	4c0b      	ldr	r4, [pc, #44]	@ (8003b34 <global_stdio_init.part.0+0x34>)
 8003b06:	4a0c      	ldr	r2, [pc, #48]	@ (8003b38 <global_stdio_init.part.0+0x38>)
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2104      	movs	r1, #4
 8003b10:	f7ff ff94 	bl	8003a3c <std>
 8003b14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b18:	2201      	movs	r2, #1
 8003b1a:	2109      	movs	r1, #9
 8003b1c:	f7ff ff8e 	bl	8003a3c <std>
 8003b20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b24:	2202      	movs	r2, #2
 8003b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b2a:	2112      	movs	r1, #18
 8003b2c:	f7ff bf86 	b.w	8003a3c <std>
 8003b30:	240003cc 	.word	0x240003cc
 8003b34:	24000294 	.word	0x24000294
 8003b38:	08003aa9 	.word	0x08003aa9

08003b3c <__sfp_lock_acquire>:
 8003b3c:	4801      	ldr	r0, [pc, #4]	@ (8003b44 <__sfp_lock_acquire+0x8>)
 8003b3e:	f000 b9ee 	b.w	8003f1e <__retarget_lock_acquire_recursive>
 8003b42:	bf00      	nop
 8003b44:	240003d5 	.word	0x240003d5

08003b48 <__sfp_lock_release>:
 8003b48:	4801      	ldr	r0, [pc, #4]	@ (8003b50 <__sfp_lock_release+0x8>)
 8003b4a:	f000 b9e9 	b.w	8003f20 <__retarget_lock_release_recursive>
 8003b4e:	bf00      	nop
 8003b50:	240003d5 	.word	0x240003d5

08003b54 <__sinit>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	4604      	mov	r4, r0
 8003b58:	f7ff fff0 	bl	8003b3c <__sfp_lock_acquire>
 8003b5c:	6a23      	ldr	r3, [r4, #32]
 8003b5e:	b11b      	cbz	r3, 8003b68 <__sinit+0x14>
 8003b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b64:	f7ff bff0 	b.w	8003b48 <__sfp_lock_release>
 8003b68:	4b04      	ldr	r3, [pc, #16]	@ (8003b7c <__sinit+0x28>)
 8003b6a:	6223      	str	r3, [r4, #32]
 8003b6c:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <__sinit+0x2c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f5      	bne.n	8003b60 <__sinit+0xc>
 8003b74:	f7ff ffc4 	bl	8003b00 <global_stdio_init.part.0>
 8003b78:	e7f2      	b.n	8003b60 <__sinit+0xc>
 8003b7a:	bf00      	nop
 8003b7c:	08003ac1 	.word	0x08003ac1
 8003b80:	240003cc 	.word	0x240003cc

08003b84 <_fwalk_sglue>:
 8003b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b88:	4607      	mov	r7, r0
 8003b8a:	4688      	mov	r8, r1
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	2600      	movs	r6, #0
 8003b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b94:	f1b9 0901 	subs.w	r9, r9, #1
 8003b98:	d505      	bpl.n	8003ba6 <_fwalk_sglue+0x22>
 8003b9a:	6824      	ldr	r4, [r4, #0]
 8003b9c:	2c00      	cmp	r4, #0
 8003b9e:	d1f7      	bne.n	8003b90 <_fwalk_sglue+0xc>
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ba6:	89ab      	ldrh	r3, [r5, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d907      	bls.n	8003bbc <_fwalk_sglue+0x38>
 8003bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	d003      	beq.n	8003bbc <_fwalk_sglue+0x38>
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	47c0      	blx	r8
 8003bba:	4306      	orrs	r6, r0
 8003bbc:	3568      	adds	r5, #104	@ 0x68
 8003bbe:	e7e9      	b.n	8003b94 <_fwalk_sglue+0x10>

08003bc0 <_puts_r>:
 8003bc0:	6a03      	ldr	r3, [r0, #32]
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	6884      	ldr	r4, [r0, #8]
 8003bc6:	4605      	mov	r5, r0
 8003bc8:	460e      	mov	r6, r1
 8003bca:	b90b      	cbnz	r3, 8003bd0 <_puts_r+0x10>
 8003bcc:	f7ff ffc2 	bl	8003b54 <__sinit>
 8003bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bd2:	07db      	lsls	r3, r3, #31
 8003bd4:	d405      	bmi.n	8003be2 <_puts_r+0x22>
 8003bd6:	89a3      	ldrh	r3, [r4, #12]
 8003bd8:	0598      	lsls	r0, r3, #22
 8003bda:	d402      	bmi.n	8003be2 <_puts_r+0x22>
 8003bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bde:	f000 f99e 	bl	8003f1e <__retarget_lock_acquire_recursive>
 8003be2:	89a3      	ldrh	r3, [r4, #12]
 8003be4:	0719      	lsls	r1, r3, #28
 8003be6:	d502      	bpl.n	8003bee <_puts_r+0x2e>
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d135      	bne.n	8003c5a <_puts_r+0x9a>
 8003bee:	4621      	mov	r1, r4
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	f000 f8c5 	bl	8003d80 <__swsetup_r>
 8003bf6:	b380      	cbz	r0, 8003c5a <_puts_r+0x9a>
 8003bf8:	f04f 35ff 	mov.w	r5, #4294967295
 8003bfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003bfe:	07da      	lsls	r2, r3, #31
 8003c00:	d405      	bmi.n	8003c0e <_puts_r+0x4e>
 8003c02:	89a3      	ldrh	r3, [r4, #12]
 8003c04:	059b      	lsls	r3, r3, #22
 8003c06:	d402      	bmi.n	8003c0e <_puts_r+0x4e>
 8003c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c0a:	f000 f989 	bl	8003f20 <__retarget_lock_release_recursive>
 8003c0e:	4628      	mov	r0, r5
 8003c10:	bd70      	pop	{r4, r5, r6, pc}
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da04      	bge.n	8003c20 <_puts_r+0x60>
 8003c16:	69a2      	ldr	r2, [r4, #24]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	dc17      	bgt.n	8003c4c <_puts_r+0x8c>
 8003c1c:	290a      	cmp	r1, #10
 8003c1e:	d015      	beq.n	8003c4c <_puts_r+0x8c>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	6022      	str	r2, [r4, #0]
 8003c26:	7019      	strb	r1, [r3, #0]
 8003c28:	68a3      	ldr	r3, [r4, #8]
 8003c2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	60a3      	str	r3, [r4, #8]
 8003c32:	2900      	cmp	r1, #0
 8003c34:	d1ed      	bne.n	8003c12 <_puts_r+0x52>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	da11      	bge.n	8003c5e <_puts_r+0x9e>
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	210a      	movs	r1, #10
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f000 f85f 	bl	8003d02 <__swbuf_r>
 8003c44:	3001      	adds	r0, #1
 8003c46:	d0d7      	beq.n	8003bf8 <_puts_r+0x38>
 8003c48:	250a      	movs	r5, #10
 8003c4a:	e7d7      	b.n	8003bfc <_puts_r+0x3c>
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	4628      	mov	r0, r5
 8003c50:	f000 f857 	bl	8003d02 <__swbuf_r>
 8003c54:	3001      	adds	r0, #1
 8003c56:	d1e7      	bne.n	8003c28 <_puts_r+0x68>
 8003c58:	e7ce      	b.n	8003bf8 <_puts_r+0x38>
 8003c5a:	3e01      	subs	r6, #1
 8003c5c:	e7e4      	b.n	8003c28 <_puts_r+0x68>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	6022      	str	r2, [r4, #0]
 8003c64:	220a      	movs	r2, #10
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e7ee      	b.n	8003c48 <_puts_r+0x88>
	...

08003c6c <puts>:
 8003c6c:	4b02      	ldr	r3, [pc, #8]	@ (8003c78 <puts+0xc>)
 8003c6e:	4601      	mov	r1, r0
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	f7ff bfa5 	b.w	8003bc0 <_puts_r>
 8003c76:	bf00      	nop
 8003c78:	2400001c 	.word	0x2400001c

08003c7c <__sread>:
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	460c      	mov	r4, r1
 8003c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c84:	f000 f8fc 	bl	8003e80 <_read_r>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	bfab      	itete	ge
 8003c8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c90:	181b      	addge	r3, r3, r0
 8003c92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c96:	bfac      	ite	ge
 8003c98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c9a:	81a3      	strhlt	r3, [r4, #12]
 8003c9c:	bd10      	pop	{r4, pc}

08003c9e <__swrite>:
 8003c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca2:	461f      	mov	r7, r3
 8003ca4:	898b      	ldrh	r3, [r1, #12]
 8003ca6:	05db      	lsls	r3, r3, #23
 8003ca8:	4605      	mov	r5, r0
 8003caa:	460c      	mov	r4, r1
 8003cac:	4616      	mov	r6, r2
 8003cae:	d505      	bpl.n	8003cbc <__swrite+0x1e>
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f000 f8d0 	bl	8003e5c <_lseek_r>
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cc6:	81a3      	strh	r3, [r4, #12]
 8003cc8:	4632      	mov	r2, r6
 8003cca:	463b      	mov	r3, r7
 8003ccc:	4628      	mov	r0, r5
 8003cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd2:	f000 b8e7 	b.w	8003ea4 <_write_r>

08003cd6 <__sseek>:
 8003cd6:	b510      	push	{r4, lr}
 8003cd8:	460c      	mov	r4, r1
 8003cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cde:	f000 f8bd 	bl	8003e5c <_lseek_r>
 8003ce2:	1c43      	adds	r3, r0, #1
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	bf15      	itete	ne
 8003ce8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003cea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003cee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003cf2:	81a3      	strheq	r3, [r4, #12]
 8003cf4:	bf18      	it	ne
 8003cf6:	81a3      	strhne	r3, [r4, #12]
 8003cf8:	bd10      	pop	{r4, pc}

08003cfa <__sclose>:
 8003cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfe:	f000 b89d 	b.w	8003e3c <_close_r>

08003d02 <__swbuf_r>:
 8003d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d04:	460e      	mov	r6, r1
 8003d06:	4614      	mov	r4, r2
 8003d08:	4605      	mov	r5, r0
 8003d0a:	b118      	cbz	r0, 8003d14 <__swbuf_r+0x12>
 8003d0c:	6a03      	ldr	r3, [r0, #32]
 8003d0e:	b90b      	cbnz	r3, 8003d14 <__swbuf_r+0x12>
 8003d10:	f7ff ff20 	bl	8003b54 <__sinit>
 8003d14:	69a3      	ldr	r3, [r4, #24]
 8003d16:	60a3      	str	r3, [r4, #8]
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	071a      	lsls	r2, r3, #28
 8003d1c:	d501      	bpl.n	8003d22 <__swbuf_r+0x20>
 8003d1e:	6923      	ldr	r3, [r4, #16]
 8003d20:	b943      	cbnz	r3, 8003d34 <__swbuf_r+0x32>
 8003d22:	4621      	mov	r1, r4
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 f82b 	bl	8003d80 <__swsetup_r>
 8003d2a:	b118      	cbz	r0, 8003d34 <__swbuf_r+0x32>
 8003d2c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d30:	4638      	mov	r0, r7
 8003d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	6922      	ldr	r2, [r4, #16]
 8003d38:	1a98      	subs	r0, r3, r2
 8003d3a:	6963      	ldr	r3, [r4, #20]
 8003d3c:	b2f6      	uxtb	r6, r6
 8003d3e:	4283      	cmp	r3, r0
 8003d40:	4637      	mov	r7, r6
 8003d42:	dc05      	bgt.n	8003d50 <__swbuf_r+0x4e>
 8003d44:	4621      	mov	r1, r4
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 fa68 	bl	800421c <_fflush_r>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d1ed      	bne.n	8003d2c <__swbuf_r+0x2a>
 8003d50:	68a3      	ldr	r3, [r4, #8]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	60a3      	str	r3, [r4, #8]
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	6022      	str	r2, [r4, #0]
 8003d5c:	701e      	strb	r6, [r3, #0]
 8003d5e:	6962      	ldr	r2, [r4, #20]
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d004      	beq.n	8003d70 <__swbuf_r+0x6e>
 8003d66:	89a3      	ldrh	r3, [r4, #12]
 8003d68:	07db      	lsls	r3, r3, #31
 8003d6a:	d5e1      	bpl.n	8003d30 <__swbuf_r+0x2e>
 8003d6c:	2e0a      	cmp	r6, #10
 8003d6e:	d1df      	bne.n	8003d30 <__swbuf_r+0x2e>
 8003d70:	4621      	mov	r1, r4
 8003d72:	4628      	mov	r0, r5
 8003d74:	f000 fa52 	bl	800421c <_fflush_r>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d0d9      	beq.n	8003d30 <__swbuf_r+0x2e>
 8003d7c:	e7d6      	b.n	8003d2c <__swbuf_r+0x2a>
	...

08003d80 <__swsetup_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4b29      	ldr	r3, [pc, #164]	@ (8003e28 <__swsetup_r+0xa8>)
 8003d84:	4605      	mov	r5, r0
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	460c      	mov	r4, r1
 8003d8a:	b118      	cbz	r0, 8003d94 <__swsetup_r+0x14>
 8003d8c:	6a03      	ldr	r3, [r0, #32]
 8003d8e:	b90b      	cbnz	r3, 8003d94 <__swsetup_r+0x14>
 8003d90:	f7ff fee0 	bl	8003b54 <__sinit>
 8003d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d98:	0719      	lsls	r1, r3, #28
 8003d9a:	d422      	bmi.n	8003de2 <__swsetup_r+0x62>
 8003d9c:	06da      	lsls	r2, r3, #27
 8003d9e:	d407      	bmi.n	8003db0 <__swsetup_r+0x30>
 8003da0:	2209      	movs	r2, #9
 8003da2:	602a      	str	r2, [r5, #0]
 8003da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da8:	81a3      	strh	r3, [r4, #12]
 8003daa:	f04f 30ff 	mov.w	r0, #4294967295
 8003dae:	e033      	b.n	8003e18 <__swsetup_r+0x98>
 8003db0:	0758      	lsls	r0, r3, #29
 8003db2:	d512      	bpl.n	8003dda <__swsetup_r+0x5a>
 8003db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003db6:	b141      	cbz	r1, 8003dca <__swsetup_r+0x4a>
 8003db8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003dbc:	4299      	cmp	r1, r3
 8003dbe:	d002      	beq.n	8003dc6 <__swsetup_r+0x46>
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f000 f8af 	bl	8003f24 <_free_r>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003dca:	89a3      	ldrh	r3, [r4, #12]
 8003dcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003dd0:	81a3      	strh	r3, [r4, #12]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6063      	str	r3, [r4, #4]
 8003dd6:	6923      	ldr	r3, [r4, #16]
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	89a3      	ldrh	r3, [r4, #12]
 8003ddc:	f043 0308 	orr.w	r3, r3, #8
 8003de0:	81a3      	strh	r3, [r4, #12]
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	b94b      	cbnz	r3, 8003dfa <__swsetup_r+0x7a>
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003df0:	d003      	beq.n	8003dfa <__swsetup_r+0x7a>
 8003df2:	4621      	mov	r1, r4
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 fa5f 	bl	80042b8 <__smakebuf_r>
 8003dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dfe:	f013 0201 	ands.w	r2, r3, #1
 8003e02:	d00a      	beq.n	8003e1a <__swsetup_r+0x9a>
 8003e04:	2200      	movs	r2, #0
 8003e06:	60a2      	str	r2, [r4, #8]
 8003e08:	6962      	ldr	r2, [r4, #20]
 8003e0a:	4252      	negs	r2, r2
 8003e0c:	61a2      	str	r2, [r4, #24]
 8003e0e:	6922      	ldr	r2, [r4, #16]
 8003e10:	b942      	cbnz	r2, 8003e24 <__swsetup_r+0xa4>
 8003e12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e16:	d1c5      	bne.n	8003da4 <__swsetup_r+0x24>
 8003e18:	bd38      	pop	{r3, r4, r5, pc}
 8003e1a:	0799      	lsls	r1, r3, #30
 8003e1c:	bf58      	it	pl
 8003e1e:	6962      	ldrpl	r2, [r4, #20]
 8003e20:	60a2      	str	r2, [r4, #8]
 8003e22:	e7f4      	b.n	8003e0e <__swsetup_r+0x8e>
 8003e24:	2000      	movs	r0, #0
 8003e26:	e7f7      	b.n	8003e18 <__swsetup_r+0x98>
 8003e28:	2400001c 	.word	0x2400001c

08003e2c <memset>:
 8003e2c:	4402      	add	r2, r0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <_close_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	4d06      	ldr	r5, [pc, #24]	@ (8003e58 <_close_r+0x1c>)
 8003e40:	2300      	movs	r3, #0
 8003e42:	4604      	mov	r4, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	602b      	str	r3, [r5, #0]
 8003e48:	f7fc fee2 	bl	8000c10 <_close>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_close_r+0x1a>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_close_r+0x1a>
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	240003d0 	.word	0x240003d0

08003e5c <_lseek_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d07      	ldr	r5, [pc, #28]	@ (8003e7c <_lseek_r+0x20>)
 8003e60:	4604      	mov	r4, r0
 8003e62:	4608      	mov	r0, r1
 8003e64:	4611      	mov	r1, r2
 8003e66:	2200      	movs	r2, #0
 8003e68:	602a      	str	r2, [r5, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f7fc fef7 	bl	8000c5e <_lseek>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d102      	bne.n	8003e7a <_lseek_r+0x1e>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	b103      	cbz	r3, 8003e7a <_lseek_r+0x1e>
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	240003d0 	.word	0x240003d0

08003e80 <_read_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4d07      	ldr	r5, [pc, #28]	@ (8003ea0 <_read_r+0x20>)
 8003e84:	4604      	mov	r4, r0
 8003e86:	4608      	mov	r0, r1
 8003e88:	4611      	mov	r1, r2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	602a      	str	r2, [r5, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f7fc fe85 	bl	8000b9e <_read>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_read_r+0x1e>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_read_r+0x1e>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	240003d0 	.word	0x240003d0

08003ea4 <_write_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4d07      	ldr	r5, [pc, #28]	@ (8003ec4 <_write_r+0x20>)
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	4608      	mov	r0, r1
 8003eac:	4611      	mov	r1, r2
 8003eae:	2200      	movs	r2, #0
 8003eb0:	602a      	str	r2, [r5, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f7fc fe90 	bl	8000bd8 <_write>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_write_r+0x1e>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_write_r+0x1e>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	240003d0 	.word	0x240003d0

08003ec8 <__errno>:
 8003ec8:	4b01      	ldr	r3, [pc, #4]	@ (8003ed0 <__errno+0x8>)
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	2400001c 	.word	0x2400001c

08003ed4 <__libc_init_array>:
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8003f0c <__libc_init_array+0x38>)
 8003ed8:	4c0d      	ldr	r4, [pc, #52]	@ (8003f10 <__libc_init_array+0x3c>)
 8003eda:	1b64      	subs	r4, r4, r5
 8003edc:	10a4      	asrs	r4, r4, #2
 8003ede:	2600      	movs	r6, #0
 8003ee0:	42a6      	cmp	r6, r4
 8003ee2:	d109      	bne.n	8003ef8 <__libc_init_array+0x24>
 8003ee4:	4d0b      	ldr	r5, [pc, #44]	@ (8003f14 <__libc_init_array+0x40>)
 8003ee6:	4c0c      	ldr	r4, [pc, #48]	@ (8003f18 <__libc_init_array+0x44>)
 8003ee8:	f000 fa54 	bl	8004394 <_init>
 8003eec:	1b64      	subs	r4, r4, r5
 8003eee:	10a4      	asrs	r4, r4, #2
 8003ef0:	2600      	movs	r6, #0
 8003ef2:	42a6      	cmp	r6, r4
 8003ef4:	d105      	bne.n	8003f02 <__libc_init_array+0x2e>
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
 8003ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003efc:	4798      	blx	r3
 8003efe:	3601      	adds	r6, #1
 8003f00:	e7ee      	b.n	8003ee0 <__libc_init_array+0xc>
 8003f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f06:	4798      	blx	r3
 8003f08:	3601      	adds	r6, #1
 8003f0a:	e7f2      	b.n	8003ef2 <__libc_init_array+0x1e>
 8003f0c:	08004574 	.word	0x08004574
 8003f10:	08004574 	.word	0x08004574
 8003f14:	08004574 	.word	0x08004574
 8003f18:	08004578 	.word	0x08004578

08003f1c <__retarget_lock_init_recursive>:
 8003f1c:	4770      	bx	lr

08003f1e <__retarget_lock_acquire_recursive>:
 8003f1e:	4770      	bx	lr

08003f20 <__retarget_lock_release_recursive>:
 8003f20:	4770      	bx	lr
	...

08003f24 <_free_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4605      	mov	r5, r0
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	d041      	beq.n	8003fb0 <_free_r+0x8c>
 8003f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f30:	1f0c      	subs	r4, r1, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bfb8      	it	lt
 8003f36:	18e4      	addlt	r4, r4, r3
 8003f38:	f000 f8e0 	bl	80040fc <__malloc_lock>
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb4 <_free_r+0x90>)
 8003f3e:	6813      	ldr	r3, [r2, #0]
 8003f40:	b933      	cbnz	r3, 8003f50 <_free_r+0x2c>
 8003f42:	6063      	str	r3, [r4, #4]
 8003f44:	6014      	str	r4, [r2, #0]
 8003f46:	4628      	mov	r0, r5
 8003f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f4c:	f000 b8dc 	b.w	8004108 <__malloc_unlock>
 8003f50:	42a3      	cmp	r3, r4
 8003f52:	d908      	bls.n	8003f66 <_free_r+0x42>
 8003f54:	6820      	ldr	r0, [r4, #0]
 8003f56:	1821      	adds	r1, r4, r0
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	bf01      	itttt	eq
 8003f5c:	6819      	ldreq	r1, [r3, #0]
 8003f5e:	685b      	ldreq	r3, [r3, #4]
 8003f60:	1809      	addeq	r1, r1, r0
 8003f62:	6021      	streq	r1, [r4, #0]
 8003f64:	e7ed      	b.n	8003f42 <_free_r+0x1e>
 8003f66:	461a      	mov	r2, r3
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b10b      	cbz	r3, 8003f70 <_free_r+0x4c>
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	d9fa      	bls.n	8003f66 <_free_r+0x42>
 8003f70:	6811      	ldr	r1, [r2, #0]
 8003f72:	1850      	adds	r0, r2, r1
 8003f74:	42a0      	cmp	r0, r4
 8003f76:	d10b      	bne.n	8003f90 <_free_r+0x6c>
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	4401      	add	r1, r0
 8003f7c:	1850      	adds	r0, r2, r1
 8003f7e:	4283      	cmp	r3, r0
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	d1e0      	bne.n	8003f46 <_free_r+0x22>
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	6053      	str	r3, [r2, #4]
 8003f8a:	4408      	add	r0, r1
 8003f8c:	6010      	str	r0, [r2, #0]
 8003f8e:	e7da      	b.n	8003f46 <_free_r+0x22>
 8003f90:	d902      	bls.n	8003f98 <_free_r+0x74>
 8003f92:	230c      	movs	r3, #12
 8003f94:	602b      	str	r3, [r5, #0]
 8003f96:	e7d6      	b.n	8003f46 <_free_r+0x22>
 8003f98:	6820      	ldr	r0, [r4, #0]
 8003f9a:	1821      	adds	r1, r4, r0
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	bf04      	itt	eq
 8003fa0:	6819      	ldreq	r1, [r3, #0]
 8003fa2:	685b      	ldreq	r3, [r3, #4]
 8003fa4:	6063      	str	r3, [r4, #4]
 8003fa6:	bf04      	itt	eq
 8003fa8:	1809      	addeq	r1, r1, r0
 8003faa:	6021      	streq	r1, [r4, #0]
 8003fac:	6054      	str	r4, [r2, #4]
 8003fae:	e7ca      	b.n	8003f46 <_free_r+0x22>
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
 8003fb2:	bf00      	nop
 8003fb4:	240003dc 	.word	0x240003dc

08003fb8 <sbrk_aligned>:
 8003fb8:	b570      	push	{r4, r5, r6, lr}
 8003fba:	4e0f      	ldr	r6, [pc, #60]	@ (8003ff8 <sbrk_aligned+0x40>)
 8003fbc:	460c      	mov	r4, r1
 8003fbe:	6831      	ldr	r1, [r6, #0]
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	b911      	cbnz	r1, 8003fca <sbrk_aligned+0x12>
 8003fc4:	f000 f9d6 	bl	8004374 <_sbrk_r>
 8003fc8:	6030      	str	r0, [r6, #0]
 8003fca:	4621      	mov	r1, r4
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f000 f9d1 	bl	8004374 <_sbrk_r>
 8003fd2:	1c43      	adds	r3, r0, #1
 8003fd4:	d103      	bne.n	8003fde <sbrk_aligned+0x26>
 8003fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8003fda:	4620      	mov	r0, r4
 8003fdc:	bd70      	pop	{r4, r5, r6, pc}
 8003fde:	1cc4      	adds	r4, r0, #3
 8003fe0:	f024 0403 	bic.w	r4, r4, #3
 8003fe4:	42a0      	cmp	r0, r4
 8003fe6:	d0f8      	beq.n	8003fda <sbrk_aligned+0x22>
 8003fe8:	1a21      	subs	r1, r4, r0
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 f9c2 	bl	8004374 <_sbrk_r>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d1f2      	bne.n	8003fda <sbrk_aligned+0x22>
 8003ff4:	e7ef      	b.n	8003fd6 <sbrk_aligned+0x1e>
 8003ff6:	bf00      	nop
 8003ff8:	240003d8 	.word	0x240003d8

08003ffc <_malloc_r>:
 8003ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004000:	1ccd      	adds	r5, r1, #3
 8004002:	f025 0503 	bic.w	r5, r5, #3
 8004006:	3508      	adds	r5, #8
 8004008:	2d0c      	cmp	r5, #12
 800400a:	bf38      	it	cc
 800400c:	250c      	movcc	r5, #12
 800400e:	2d00      	cmp	r5, #0
 8004010:	4606      	mov	r6, r0
 8004012:	db01      	blt.n	8004018 <_malloc_r+0x1c>
 8004014:	42a9      	cmp	r1, r5
 8004016:	d904      	bls.n	8004022 <_malloc_r+0x26>
 8004018:	230c      	movs	r3, #12
 800401a:	6033      	str	r3, [r6, #0]
 800401c:	2000      	movs	r0, #0
 800401e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040f8 <_malloc_r+0xfc>
 8004026:	f000 f869 	bl	80040fc <__malloc_lock>
 800402a:	f8d8 3000 	ldr.w	r3, [r8]
 800402e:	461c      	mov	r4, r3
 8004030:	bb44      	cbnz	r4, 8004084 <_malloc_r+0x88>
 8004032:	4629      	mov	r1, r5
 8004034:	4630      	mov	r0, r6
 8004036:	f7ff ffbf 	bl	8003fb8 <sbrk_aligned>
 800403a:	1c43      	adds	r3, r0, #1
 800403c:	4604      	mov	r4, r0
 800403e:	d158      	bne.n	80040f2 <_malloc_r+0xf6>
 8004040:	f8d8 4000 	ldr.w	r4, [r8]
 8004044:	4627      	mov	r7, r4
 8004046:	2f00      	cmp	r7, #0
 8004048:	d143      	bne.n	80040d2 <_malloc_r+0xd6>
 800404a:	2c00      	cmp	r4, #0
 800404c:	d04b      	beq.n	80040e6 <_malloc_r+0xea>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	4639      	mov	r1, r7
 8004052:	4630      	mov	r0, r6
 8004054:	eb04 0903 	add.w	r9, r4, r3
 8004058:	f000 f98c 	bl	8004374 <_sbrk_r>
 800405c:	4581      	cmp	r9, r0
 800405e:	d142      	bne.n	80040e6 <_malloc_r+0xea>
 8004060:	6821      	ldr	r1, [r4, #0]
 8004062:	1a6d      	subs	r5, r5, r1
 8004064:	4629      	mov	r1, r5
 8004066:	4630      	mov	r0, r6
 8004068:	f7ff ffa6 	bl	8003fb8 <sbrk_aligned>
 800406c:	3001      	adds	r0, #1
 800406e:	d03a      	beq.n	80040e6 <_malloc_r+0xea>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	442b      	add	r3, r5
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	f8d8 3000 	ldr.w	r3, [r8]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	bb62      	cbnz	r2, 80040d8 <_malloc_r+0xdc>
 800407e:	f8c8 7000 	str.w	r7, [r8]
 8004082:	e00f      	b.n	80040a4 <_malloc_r+0xa8>
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	1b52      	subs	r2, r2, r5
 8004088:	d420      	bmi.n	80040cc <_malloc_r+0xd0>
 800408a:	2a0b      	cmp	r2, #11
 800408c:	d917      	bls.n	80040be <_malloc_r+0xc2>
 800408e:	1961      	adds	r1, r4, r5
 8004090:	42a3      	cmp	r3, r4
 8004092:	6025      	str	r5, [r4, #0]
 8004094:	bf18      	it	ne
 8004096:	6059      	strne	r1, [r3, #4]
 8004098:	6863      	ldr	r3, [r4, #4]
 800409a:	bf08      	it	eq
 800409c:	f8c8 1000 	streq.w	r1, [r8]
 80040a0:	5162      	str	r2, [r4, r5]
 80040a2:	604b      	str	r3, [r1, #4]
 80040a4:	4630      	mov	r0, r6
 80040a6:	f000 f82f 	bl	8004108 <__malloc_unlock>
 80040aa:	f104 000b 	add.w	r0, r4, #11
 80040ae:	1d23      	adds	r3, r4, #4
 80040b0:	f020 0007 	bic.w	r0, r0, #7
 80040b4:	1ac2      	subs	r2, r0, r3
 80040b6:	bf1c      	itt	ne
 80040b8:	1a1b      	subne	r3, r3, r0
 80040ba:	50a3      	strne	r3, [r4, r2]
 80040bc:	e7af      	b.n	800401e <_malloc_r+0x22>
 80040be:	6862      	ldr	r2, [r4, #4]
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	bf0c      	ite	eq
 80040c4:	f8c8 2000 	streq.w	r2, [r8]
 80040c8:	605a      	strne	r2, [r3, #4]
 80040ca:	e7eb      	b.n	80040a4 <_malloc_r+0xa8>
 80040cc:	4623      	mov	r3, r4
 80040ce:	6864      	ldr	r4, [r4, #4]
 80040d0:	e7ae      	b.n	8004030 <_malloc_r+0x34>
 80040d2:	463c      	mov	r4, r7
 80040d4:	687f      	ldr	r7, [r7, #4]
 80040d6:	e7b6      	b.n	8004046 <_malloc_r+0x4a>
 80040d8:	461a      	mov	r2, r3
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	42a3      	cmp	r3, r4
 80040de:	d1fb      	bne.n	80040d8 <_malloc_r+0xdc>
 80040e0:	2300      	movs	r3, #0
 80040e2:	6053      	str	r3, [r2, #4]
 80040e4:	e7de      	b.n	80040a4 <_malloc_r+0xa8>
 80040e6:	230c      	movs	r3, #12
 80040e8:	6033      	str	r3, [r6, #0]
 80040ea:	4630      	mov	r0, r6
 80040ec:	f000 f80c 	bl	8004108 <__malloc_unlock>
 80040f0:	e794      	b.n	800401c <_malloc_r+0x20>
 80040f2:	6005      	str	r5, [r0, #0]
 80040f4:	e7d6      	b.n	80040a4 <_malloc_r+0xa8>
 80040f6:	bf00      	nop
 80040f8:	240003dc 	.word	0x240003dc

080040fc <__malloc_lock>:
 80040fc:	4801      	ldr	r0, [pc, #4]	@ (8004104 <__malloc_lock+0x8>)
 80040fe:	f7ff bf0e 	b.w	8003f1e <__retarget_lock_acquire_recursive>
 8004102:	bf00      	nop
 8004104:	240003d4 	.word	0x240003d4

08004108 <__malloc_unlock>:
 8004108:	4801      	ldr	r0, [pc, #4]	@ (8004110 <__malloc_unlock+0x8>)
 800410a:	f7ff bf09 	b.w	8003f20 <__retarget_lock_release_recursive>
 800410e:	bf00      	nop
 8004110:	240003d4 	.word	0x240003d4

08004114 <__sflush_r>:
 8004114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800411c:	0716      	lsls	r6, r2, #28
 800411e:	4605      	mov	r5, r0
 8004120:	460c      	mov	r4, r1
 8004122:	d454      	bmi.n	80041ce <__sflush_r+0xba>
 8004124:	684b      	ldr	r3, [r1, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	dc02      	bgt.n	8004130 <__sflush_r+0x1c>
 800412a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	dd48      	ble.n	80041c2 <__sflush_r+0xae>
 8004130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004132:	2e00      	cmp	r6, #0
 8004134:	d045      	beq.n	80041c2 <__sflush_r+0xae>
 8004136:	2300      	movs	r3, #0
 8004138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800413c:	682f      	ldr	r7, [r5, #0]
 800413e:	6a21      	ldr	r1, [r4, #32]
 8004140:	602b      	str	r3, [r5, #0]
 8004142:	d030      	beq.n	80041a6 <__sflush_r+0x92>
 8004144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	0759      	lsls	r1, r3, #29
 800414a:	d505      	bpl.n	8004158 <__sflush_r+0x44>
 800414c:	6863      	ldr	r3, [r4, #4]
 800414e:	1ad2      	subs	r2, r2, r3
 8004150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004152:	b10b      	cbz	r3, 8004158 <__sflush_r+0x44>
 8004154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004156:	1ad2      	subs	r2, r2, r3
 8004158:	2300      	movs	r3, #0
 800415a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800415c:	6a21      	ldr	r1, [r4, #32]
 800415e:	4628      	mov	r0, r5
 8004160:	47b0      	blx	r6
 8004162:	1c43      	adds	r3, r0, #1
 8004164:	89a3      	ldrh	r3, [r4, #12]
 8004166:	d106      	bne.n	8004176 <__sflush_r+0x62>
 8004168:	6829      	ldr	r1, [r5, #0]
 800416a:	291d      	cmp	r1, #29
 800416c:	d82b      	bhi.n	80041c6 <__sflush_r+0xb2>
 800416e:	4a2a      	ldr	r2, [pc, #168]	@ (8004218 <__sflush_r+0x104>)
 8004170:	410a      	asrs	r2, r1
 8004172:	07d6      	lsls	r6, r2, #31
 8004174:	d427      	bmi.n	80041c6 <__sflush_r+0xb2>
 8004176:	2200      	movs	r2, #0
 8004178:	6062      	str	r2, [r4, #4]
 800417a:	04d9      	lsls	r1, r3, #19
 800417c:	6922      	ldr	r2, [r4, #16]
 800417e:	6022      	str	r2, [r4, #0]
 8004180:	d504      	bpl.n	800418c <__sflush_r+0x78>
 8004182:	1c42      	adds	r2, r0, #1
 8004184:	d101      	bne.n	800418a <__sflush_r+0x76>
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	b903      	cbnz	r3, 800418c <__sflush_r+0x78>
 800418a:	6560      	str	r0, [r4, #84]	@ 0x54
 800418c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800418e:	602f      	str	r7, [r5, #0]
 8004190:	b1b9      	cbz	r1, 80041c2 <__sflush_r+0xae>
 8004192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004196:	4299      	cmp	r1, r3
 8004198:	d002      	beq.n	80041a0 <__sflush_r+0x8c>
 800419a:	4628      	mov	r0, r5
 800419c:	f7ff fec2 	bl	8003f24 <_free_r>
 80041a0:	2300      	movs	r3, #0
 80041a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80041a4:	e00d      	b.n	80041c2 <__sflush_r+0xae>
 80041a6:	2301      	movs	r3, #1
 80041a8:	4628      	mov	r0, r5
 80041aa:	47b0      	blx	r6
 80041ac:	4602      	mov	r2, r0
 80041ae:	1c50      	adds	r0, r2, #1
 80041b0:	d1c9      	bne.n	8004146 <__sflush_r+0x32>
 80041b2:	682b      	ldr	r3, [r5, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0c6      	beq.n	8004146 <__sflush_r+0x32>
 80041b8:	2b1d      	cmp	r3, #29
 80041ba:	d001      	beq.n	80041c0 <__sflush_r+0xac>
 80041bc:	2b16      	cmp	r3, #22
 80041be:	d11e      	bne.n	80041fe <__sflush_r+0xea>
 80041c0:	602f      	str	r7, [r5, #0]
 80041c2:	2000      	movs	r0, #0
 80041c4:	e022      	b.n	800420c <__sflush_r+0xf8>
 80041c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ca:	b21b      	sxth	r3, r3
 80041cc:	e01b      	b.n	8004206 <__sflush_r+0xf2>
 80041ce:	690f      	ldr	r7, [r1, #16]
 80041d0:	2f00      	cmp	r7, #0
 80041d2:	d0f6      	beq.n	80041c2 <__sflush_r+0xae>
 80041d4:	0793      	lsls	r3, r2, #30
 80041d6:	680e      	ldr	r6, [r1, #0]
 80041d8:	bf08      	it	eq
 80041da:	694b      	ldreq	r3, [r1, #20]
 80041dc:	600f      	str	r7, [r1, #0]
 80041de:	bf18      	it	ne
 80041e0:	2300      	movne	r3, #0
 80041e2:	eba6 0807 	sub.w	r8, r6, r7
 80041e6:	608b      	str	r3, [r1, #8]
 80041e8:	f1b8 0f00 	cmp.w	r8, #0
 80041ec:	dde9      	ble.n	80041c2 <__sflush_r+0xae>
 80041ee:	6a21      	ldr	r1, [r4, #32]
 80041f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80041f2:	4643      	mov	r3, r8
 80041f4:	463a      	mov	r2, r7
 80041f6:	4628      	mov	r0, r5
 80041f8:	47b0      	blx	r6
 80041fa:	2800      	cmp	r0, #0
 80041fc:	dc08      	bgt.n	8004210 <__sflush_r+0xfc>
 80041fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004206:	81a3      	strh	r3, [r4, #12]
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004210:	4407      	add	r7, r0
 8004212:	eba8 0800 	sub.w	r8, r8, r0
 8004216:	e7e7      	b.n	80041e8 <__sflush_r+0xd4>
 8004218:	dfbffffe 	.word	0xdfbffffe

0800421c <_fflush_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	690b      	ldr	r3, [r1, #16]
 8004220:	4605      	mov	r5, r0
 8004222:	460c      	mov	r4, r1
 8004224:	b913      	cbnz	r3, 800422c <_fflush_r+0x10>
 8004226:	2500      	movs	r5, #0
 8004228:	4628      	mov	r0, r5
 800422a:	bd38      	pop	{r3, r4, r5, pc}
 800422c:	b118      	cbz	r0, 8004236 <_fflush_r+0x1a>
 800422e:	6a03      	ldr	r3, [r0, #32]
 8004230:	b90b      	cbnz	r3, 8004236 <_fflush_r+0x1a>
 8004232:	f7ff fc8f 	bl	8003b54 <__sinit>
 8004236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f3      	beq.n	8004226 <_fflush_r+0xa>
 800423e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004240:	07d0      	lsls	r0, r2, #31
 8004242:	d404      	bmi.n	800424e <_fflush_r+0x32>
 8004244:	0599      	lsls	r1, r3, #22
 8004246:	d402      	bmi.n	800424e <_fflush_r+0x32>
 8004248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800424a:	f7ff fe68 	bl	8003f1e <__retarget_lock_acquire_recursive>
 800424e:	4628      	mov	r0, r5
 8004250:	4621      	mov	r1, r4
 8004252:	f7ff ff5f 	bl	8004114 <__sflush_r>
 8004256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004258:	07da      	lsls	r2, r3, #31
 800425a:	4605      	mov	r5, r0
 800425c:	d4e4      	bmi.n	8004228 <_fflush_r+0xc>
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	059b      	lsls	r3, r3, #22
 8004262:	d4e1      	bmi.n	8004228 <_fflush_r+0xc>
 8004264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004266:	f7ff fe5b 	bl	8003f20 <__retarget_lock_release_recursive>
 800426a:	e7dd      	b.n	8004228 <_fflush_r+0xc>

0800426c <__swhatbuf_r>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	460c      	mov	r4, r1
 8004270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004274:	2900      	cmp	r1, #0
 8004276:	b096      	sub	sp, #88	@ 0x58
 8004278:	4615      	mov	r5, r2
 800427a:	461e      	mov	r6, r3
 800427c:	da0d      	bge.n	800429a <__swhatbuf_r+0x2e>
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	bf14      	ite	ne
 800428a:	2340      	movne	r3, #64	@ 0x40
 800428c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004290:	2000      	movs	r0, #0
 8004292:	6031      	str	r1, [r6, #0]
 8004294:	602b      	str	r3, [r5, #0]
 8004296:	b016      	add	sp, #88	@ 0x58
 8004298:	bd70      	pop	{r4, r5, r6, pc}
 800429a:	466a      	mov	r2, sp
 800429c:	f000 f848 	bl	8004330 <_fstat_r>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	dbec      	blt.n	800427e <__swhatbuf_r+0x12>
 80042a4:	9901      	ldr	r1, [sp, #4]
 80042a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80042aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80042ae:	4259      	negs	r1, r3
 80042b0:	4159      	adcs	r1, r3
 80042b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042b6:	e7eb      	b.n	8004290 <__swhatbuf_r+0x24>

080042b8 <__smakebuf_r>:
 80042b8:	898b      	ldrh	r3, [r1, #12]
 80042ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042bc:	079d      	lsls	r5, r3, #30
 80042be:	4606      	mov	r6, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	d507      	bpl.n	80042d4 <__smakebuf_r+0x1c>
 80042c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	6123      	str	r3, [r4, #16]
 80042cc:	2301      	movs	r3, #1
 80042ce:	6163      	str	r3, [r4, #20]
 80042d0:	b003      	add	sp, #12
 80042d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d4:	ab01      	add	r3, sp, #4
 80042d6:	466a      	mov	r2, sp
 80042d8:	f7ff ffc8 	bl	800426c <__swhatbuf_r>
 80042dc:	9f00      	ldr	r7, [sp, #0]
 80042de:	4605      	mov	r5, r0
 80042e0:	4639      	mov	r1, r7
 80042e2:	4630      	mov	r0, r6
 80042e4:	f7ff fe8a 	bl	8003ffc <_malloc_r>
 80042e8:	b948      	cbnz	r0, 80042fe <__smakebuf_r+0x46>
 80042ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ee:	059a      	lsls	r2, r3, #22
 80042f0:	d4ee      	bmi.n	80042d0 <__smakebuf_r+0x18>
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	f043 0302 	orr.w	r3, r3, #2
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	e7e2      	b.n	80042c4 <__smakebuf_r+0xc>
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	6020      	str	r0, [r4, #0]
 8004302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004306:	81a3      	strh	r3, [r4, #12]
 8004308:	9b01      	ldr	r3, [sp, #4]
 800430a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800430e:	b15b      	cbz	r3, 8004328 <__smakebuf_r+0x70>
 8004310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004314:	4630      	mov	r0, r6
 8004316:	f000 f81d 	bl	8004354 <_isatty_r>
 800431a:	b128      	cbz	r0, 8004328 <__smakebuf_r+0x70>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	81a3      	strh	r3, [r4, #12]
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	431d      	orrs	r5, r3
 800432c:	81a5      	strh	r5, [r4, #12]
 800432e:	e7cf      	b.n	80042d0 <__smakebuf_r+0x18>

08004330 <_fstat_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	4d07      	ldr	r5, [pc, #28]	@ (8004350 <_fstat_r+0x20>)
 8004334:	2300      	movs	r3, #0
 8004336:	4604      	mov	r4, r0
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	602b      	str	r3, [r5, #0]
 800433e:	f7fc fc73 	bl	8000c28 <_fstat>
 8004342:	1c43      	adds	r3, r0, #1
 8004344:	d102      	bne.n	800434c <_fstat_r+0x1c>
 8004346:	682b      	ldr	r3, [r5, #0]
 8004348:	b103      	cbz	r3, 800434c <_fstat_r+0x1c>
 800434a:	6023      	str	r3, [r4, #0]
 800434c:	bd38      	pop	{r3, r4, r5, pc}
 800434e:	bf00      	nop
 8004350:	240003d0 	.word	0x240003d0

08004354 <_isatty_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	4d06      	ldr	r5, [pc, #24]	@ (8004370 <_isatty_r+0x1c>)
 8004358:	2300      	movs	r3, #0
 800435a:	4604      	mov	r4, r0
 800435c:	4608      	mov	r0, r1
 800435e:	602b      	str	r3, [r5, #0]
 8004360:	f7fc fc72 	bl	8000c48 <_isatty>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_isatty_r+0x1a>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	b103      	cbz	r3, 800436e <_isatty_r+0x1a>
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	240003d0 	.word	0x240003d0

08004374 <_sbrk_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4d06      	ldr	r5, [pc, #24]	@ (8004390 <_sbrk_r+0x1c>)
 8004378:	2300      	movs	r3, #0
 800437a:	4604      	mov	r4, r0
 800437c:	4608      	mov	r0, r1
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	f7fc fc7a 	bl	8000c78 <_sbrk>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d102      	bne.n	800438e <_sbrk_r+0x1a>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	b103      	cbz	r3, 800438e <_sbrk_r+0x1a>
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	240003d0 	.word	0x240003d0

08004394 <_init>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	bf00      	nop
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr

080043a0 <_fini>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	bf00      	nop
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr
